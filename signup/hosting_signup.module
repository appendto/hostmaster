<?php

function hosting_signup_xmlrpc() {
  return array(
     array(
      'hosting_signup.submitSite',
      'hosting_signup_submit_site',
      array('integer', 'string', 'string', 'struct'),
      t('Create a new site'),
    ),
  );
}

function hosting_signup_settings() {
  $form['hosting_signup_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Server URI'),
    '#description' => t('The address of the hostmaster system, in the format http://masterdomain.com'),
    '#default_value' => variable_get('hosting_signup_master_url', 'http://' . $_SERVER['HTTP_HOST']),
  );
  $form['hosting_signup_server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server key'),
    '#description' => t('A unique identifier used when communicating with the server'),
    '#default_value' => variable_get('hosting_signup_server_key', ''),
  );
  return system_settings_form($form);
}

function hosting_signup_menu($may_cache) {
  $items[] = array(
    'path' => 'hosting/signup',
    'title' => t('Sign up for a site'),
    'description' => t('Create your own hosted site'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('hosting_signup_form'),
    'access' => TRUE
  );
  $items[] = array(
    'path' => 'admin/settings/hosting_signup',
    'title' => t('Hosting signup form'),
    'description' => t('Configure the behaviour of the simplified hosting signup form'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('hosting_signup_settings'),
    'access' => TRUE
  );
  $items[] = array(
    'path' => 'hosting/signup/get_form',
    'title' => t('Sign up for a site'),
    'description' => t('Create your own hosted site'),
    'callback' => 'hosting_signup_get_form',
    'type' => MENU_CALLBACK,
    'access' => TRUE
  );

  $items[] = array(
    'path' => 'hosting/signup/form_populate',
    'callback' =>'_hosting_signup_form_populate',
    'type' => MENU_CALLBACK,
    'access' => TRUE,
  );


  return $items; 
}
/**
 * populate hosting site node form element with specified arguments
 */
function _hosting_signup_form_populate($element, $value, $value2 = null) {
  $path = variable_get('hosting_signup_uri', 'http://' . $_SERVER['HTTP_HOST']);
  $path .= "/hosting/hosting_site_form_populate/$element/$value";
  if ($value2) {
    $path .= "/$value2";
  }
  $request = drupal_http_request($path);
  print $request->data;
  exit();
}

function hosting_signup_form() {
  $path = variable_get('hosting_signup_uri', 'http://' . $_SERVER['HTTP_HOST']);
  $path .= '/hosting/signup/get_form';
  if ($key = variable_get('hosting_signup_server_key', '')) {
    $path .= "/$key";
  }

  drupal_add_js(drupal_get_path('module', 'hosting_signup') . '/hosting_signup_form.js');
  $result = drupal_http_request($path);
  $form = unserialize($result->data);
  return $form;
}

function hosting_signup_get_form($server_key) {
  if ($server_key != variable_get('hosting_signup_server_key', '')) {
    $form['error'] = array( '#type' => 'item',
      '#value' => t("The signup form has not been correctly configured"),
     );
  }
  else {
    global $user;
    $old_user = $user;
    $user = node_load(0);

    $node = new stdClass();
    $form['site'] = drupal_retrieve_form('hosting_site_form',$node);
  /*  $form['site']['platform'] = array(
      '#type' => 'hidden',
      '#value' => HOSTING_DEFAULT_PLATFORM,
    );*/
    unset($form['site']['client']);

    $node = new stdClass();
    $form['client'] = drupal_retrieve_form('hosting_client_form',$node);
    $user = $old_user;
  }
  print serialize($form);
  exit();
}


function hosting_signup_submit_site($username, $password, $form_values) {
  $node = new stdClass();
  $node->type = 'site';
  $node_options = variable_get('node_options_'. $type_name, array('status'));
  foreach ($node_options as $node_option) {
    $node->$node_option = 1;
  }
  foreach ($form_values as $key => $item) {
    $node->$key = $item;
  }

  $return =  FALSE;

  node_validate($node);
  $error = form_get_errors();
  if (!$error) {
    // Prepare the node for save and allow modules make changes
    $node = node_submit($node);
    // Save the node
    if ($node->nid) {
      if (node_access('update', $node)) {
        node_save($node);
      }
    }
    else {
      if (node_access('create', $node)) {
        node_save($node);
      }
    }
  }
  return $node->nid;
}

