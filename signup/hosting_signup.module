<?php

function hosting_signup_xmlrpc() {
  return array(
    array('hosting_signup.getForm',
    'hosting_signup_get_form',
    array('struct', 'string', 'struct'),
    t("Retrieve the form to build")
    ),
     array(
      'hosting_signup.submitForm',
      'hosting_signup_submit_form',
      array('struct', 'string', 'struct'),
      t('Submit your form'),
    ),
  );
}

function hosting_signup_settings() {
  $form['hosting_signup_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Server URI'),
    '#description' => t('The address of the hostmaster system, in the format http://masterdomain.com'),
    '#default_value' => variable_get('hosting_signup_master_url', 'http://' . $_SERVER['HTTP_HOST']),
  );
  $form['hosting_signup_server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server key'),
    '#description' => t('A unique identifier used when communicating with the server'),
    '#default_value' => variable_get('hosting_signup_server_key', ''),
  );
  return system_settings_form($form);
}

function hosting_signup_menu($may_cache) {
  $items[] = array(
    'path' => 'hosting/signup',
    'title' => t('Sign up for a site'),
    'description' => t('Create your own hosted site'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('hosting_signup_form'),
    'access' => TRUE
  );
  $items[] = array(
    'path' => 'admin/settings/hosting_signup',
    'title' => t('Hosting signup form'),
    'description' => t('Configure the behaviour of the simplified hosting signup form'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('hosting_signup_settings'),
    'access' => TRUE
  );
  $items[] = array(
    'path' => 'hosting/signup/get_form',
    'title' => t('Sign up for a site'),
    'description' => t('Create your own hosted site'),
    'callback' => 'hosting_signup_get_form',
    'type' => MENU_CALLBACK,
    'access' => TRUE
  );

  $items[] = array(
    'path' => 'hosting/signup/form_populate',
    'callback' =>'_hosting_signup_form_populate',
    'type' => MENU_CALLBACK,
    'access' => TRUE,
  );

  $items[] = array(
    'path' => 'hosting/signup/thanks',
    'callback' =>'hosting_signup_thanks',
    'type' => MENU_CALLBACK,
    'access' => TRUE,
  );


  return $items; 
}

/**
 * populate hosting site node form element with specified arguments
 */
function _hosting_signup_form_populate($element, $value, $value2 = null) {
  $path = variable_get('hosting_signup_uri', 'http://' . $_SERVER['HTTP_HOST']);
  $path .= "/hosting/hosting_site_form_populate/$element/$value";
  if ($value2) {
    $path .= "/$value2";
  }
  $request = drupal_http_request($path);
  print $request->data;
  exit();
}

function hosting_signup_form() {
  $path = variable_get('hosting_signup_uri', 'http://' . $_SERVER['HTTP_HOST']);
  $path .= '/xmlrpc.php';
  $key = variable_get('hosting_signup_server_key', '');

  drupal_add_js(drupal_get_path('module', 'hosting_signup') . '/hosting_signup_form.js');
  $form = xmlrpc($path, 'hosting_signup.getForm', $key, $_POST);
  $form['#action'] = '/hosting/signup';
  $form['#submit'] = array('hosting_signup_form_submit' => array());
  return $form;
}

function hosting_signup_form_submit($form_id, $values) {
  $path = variable_get('hosting_signup_uri', 'http://' . $_SERVER['HTTP_HOST']);
  $path .= '/xmlrpc.php';
  $key = variable_get('hosting_signup_server_key', '');
  $values['form_id'] =  '_hosting_signup_form';

  $return = xmlrpc($path, 'hosting_signup.submitForm', $key, $values);
  $path = sprintf("hosting/signup/thanks/%s/%s/%s", $return['site']['title'], $return['client']['email'], $return['client']['client_name']);
  drupal_goto($path);
}

function hosting_signup_get_form($server_key, $post = array()) {
  if ($server_key != variable_get('hosting_signup_server_key', '')) {
    $form['error'] = array( '#type' => 'item',
      '#value' => t("The signup form has not been correctly configured"),
     );
  }
  else {
    global $user;
    $old_user = $user;
    $user = node_load(0);
    $form = drupal_retrieve_form('_hosting_signup_form');
    unset($form['#token']);
    if (sizeof($post)) {
      $form['#post'] = $post;
      drupal_prepare_form('_hosting_signup_form', $form);
    }
    $user = $old_user;
  }
  return $form; 
}

// provide a simple non global way to store the created sites
function hosting_signup_singleton($data = null) {
  static $static = null;
  if ($data) {
    $static = $data;
  }
  return $static;
}

function hosting_signup_submit_form($server_key, $values = array()) {
  $form = hosting_signup_get_form($server_key, $values);
  drupal_process_form('_hosting_process_form', $form);
  return hosting_signup_singleton();
}

function _hosting_signup_form() {
  $node = new stdClass();
  $form['site'] = hosting_site_form($node);
  unset($form['site']['client']);
/*  $form['site']['platform'] = array(
    '#type' => 'hidden',
    '#value' => HOSTING_DEFAULT_PLATFORM
  );*/

  $form['client'] = hosting_client_form($node);
  unset($form['client']['title']);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Sign up"),
  );
  return $form;
}

function _hosting_signup_form_validate($form_id, $values) {
  $client = (object) $values;
  $client->type = 'client';
  $client->title = '';
  node_validate($client);

  $site = (object) $values;
  $site->type = 'site';
  node_validate($site);

} 

function _hosting_signup_form_submit($form_id, $values) {
  $client = (object) $values;
  $client->type = 'client';
  $client->title = '';
  $client->status = 1;
  node_save($client);

  $site = (object) $values;
  $site->type = 'site';
  $site->status = 1;
  $site->client = $client->nid;
  node_save($site);
  hosting_signup_singleton(array('client' => $client, 'site' => $site));
}

function hosting_signup_thanks($url = '', $email = '', $name = '') {
  return t("<h3>Thank you @name</h3>
    Your site (@url) has been requested, and the moment it is ready you will receive a mail at @email
 with instructions on how to log into it.", array("@name" => $name, "@url" => $url, "@email" => $email));
} 
