<?php
/**
 * @file Platform node type definition
 */

function hosting_platform_node_info() {
  #configuration
  $types["platform"] =  array(
    "type" => 'platform', "name" => 'Platform',
    "module" => 'hosting_platform',
    "has_title" => TRUE, "title_label" => t('Name'), 
    "description" => hosting_node_help("platform"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    

  return $types;
}

/**
 * Implementation of hook_hosting_tasks
 */
function hosting_platform_hosting_tasks($node) {
  $options = array();
  if (($node->type == 'platform') & !hosting_task_outstanding($node->nid, 'verify')) {
    $options['verify'] = array(
      'title' => t('Verify'),
      'description' => t('Verify that the platform is correctly installed and working.'),
      'weight' => 10,
    );
  }
  return $options;
}


function hosting_platform_hosting_feature() {
  $features['platform'] = array(
      'title' => t('Platforms'), 
      'description' => t('Allow for management of multiple platforms, and migration between platforms.'),
      'status' => HOSTING_FEATURE_DISABLED,
      'node' => 'platform',
    'group' => 'experimental');
  return $features;
}


function hosting_platform_perm() {
  return array('create platform', 'view platform', 'edit platform', 'delete platform');
}

function hosting_platform_access($op, $node) {
  if (!hosting_feature('platform')) {
    return FALSE;
  }

  switch ($op) {
    case 'create':
      return user_access('create platform');
      break;
    case 'view': 
      return user_access('view platform');
      break;
    case 'update':
      return user_access('edit platform');
      break;
    case 'delete':
      return user_access('delete platform');
      break;
    default:
      break;
  }  
}

/**
 * Small helper function to get platforms.
*/ 
function _hosting_get_platforms() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='platform' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}


function hosting_platform_provision_args($node, $task = '') {
  $values = array();
  switch ($node->type) {
    case 'site' : 
      $node = node_load($node->platform);
    case 'platform' : 
      $values['platform'] = $node->nid;
      $values['publish_path'] = $node->publish_path;
      if ($task == 'verify') {
        $values['master_url'] = variable_get('install_url', $GLOBALS['base_url']);
      }
      break;
  }
  return $values;
}

/**
 * Implementation of hook_form().
 */
function hosting_platform_form(&$node) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#description' => t('Choose a descriptive name for your platform.'),
    '#size' => 40,
    '#default_value' => $node->title,
    '#maxlength' => 255,
  );

  $form['publish_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Publish path'),
    '#required' => TRUE,
    '#description' => t('The path on the filesystem where the sites will be hosted.'),
    '#size' => 40,
    '#default_value' => $node->publish_path,
    '#maxlength' => 255,
  );

  $servers = _hosting_get_web_servers();
  if (sizeof($servers) > 1) {
    $form['web_server'] = array(
      '#type' => 'radios',
      '#title' => t('Web server'),
      '#description' => t('The web server the sites will be hosted on.'),
      '#options' => $servers,
      '#default_value' => ($node->web_server) ? $node->web_server : HOSTING_DEFAULT_WEB_SERVER,
    );
  }
  else {
    $form['web_server'] = array('#type' => 'hidden', '#value' => key($servers));
  }

  if ($node->nid != HOSTING_DEFAULT_PLATFORM) {
    $form['default_platform'] = array(
      '#type' => 'checkbox',
      '#return_value' => 1,
      '#title' => t('Make default platform for new sites'),
    );
  } else {
    $form['default_platform'] = array(
      '#type' => 'value', 
      '#value' => 1
    );
  }
  return $form;
}



/**
 * Implementation of hook_insert().
 */
function hosting_platform_insert($node) {
  if ($node->default_platform == 1) {
    variable_set('hosting_default_platform', $node->nid);
  }
  hosting_add_task($node->nid, 'verify');
  db_query("INSERT INTO {hosting_platform} (vid, nid, publish_path, release_id, verified, web_server) VALUES (%d, %d, '%s', %d, %d, %d)",
    $node->vid, $node->nid, $node->publish_path, $node->release_id, $node->verified, $node->web_server);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_platform_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_platform_insert($node);
  }
  else {
    if ($node->default_platform == 1) {
      variable_set('hosting_default_platform', $node->nid);
    }
    db_query("UPDATE {hosting_platform} SET publish_path = '%s', web_server = %d, release_id = %d, verified = %d WHERE nid=%d",
              $node->publish_path, $node->web_server, $node->release_id, $node->verified, $node->nid);
  }
}

function hosting_nodeapi_platform_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_platform} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_platform_delete($node) {
  db_query('DELETE FROM {hosting_platform} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_platform_load($node) {
  $additions = db_fetch_object(db_query('SELECT publish_path, release_id, verified, web_server FROM {hosting_platform} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_platform_view($node, $teaser = FALSE, $page = FALSE) {
  $node->content['info'] = array(
    '#prefix' => '<div id="hosting-platform-info">',
    '#suffix' => '</div>'
  );
  $node->content['info']['verified'] = array(
    '#type' => 'item',
    '#title' => t('Verified'),
    '#value' => hosting_format_interval($node->verified),
    '#weight' => -10
  );

  if ($node->release_id) {
    $node->content['info']['release'] = array(
      '#type' => 'item',
      '#title' => t('Release'),
      '#value' => _hosting_node_link($node->release_id),
      '#weight' => -9
    );
  }

  $node->content['info']['publish_path'] = array(
    '#type' => 'item',
    '#title' => t('Publish path'),
    '#value' => filter_xss($node->publish_path),
    '#weight' => -8
  );
 
  $node->content['info']['web_server'] = array(
    '#type' => 'item',
    '#title' => t('Web server'),
    '#value' => _hosting_node_link($node->web_server),
    '#weight' => -7
  );

  if ($node->nid == HOSTING_DEFAULT_PLATFORM) {
    $node->content['info']['default_platform'] = array(
      '#type' => 'item',
      '#description' => t('This platform is the default platform for new sites'),
    );
  }

  $node->content['sites_view'] = array(
    '#type' => 'item',
    '#value' => hosting_site_list("platform", $node->nid),
    '#prefix' => '<div id="hosting-site-list">',
    '#suffix' => '</div>',
    '#weight' => 10
  );

  if ($node->nid) {
    $node->content['tasks_view'] = array(
      '#type' => 'item',
      '#value' => hosting_task_list("rid", $node->nid),
      '#prefix' => '<div id="hosting-task-list">',
      '#suffix' => '</div>',
      '#weight' => -6
    );
  }

  return $node;
}

/**
 * Create the configuration file containing the drush details.
 *
 * Outside of web root. not readable by web server. _important_
 */
function _hosting_generate_platform_config_file($node) {
  if ($node->type != "platform") {
    return null;
  }
  $path = _provision_config_path();
  $web_server = node_load($node->web_server);

  if (!provision_check_path($path . '/drush', "is_dir")) {
    provision_check_path($path, "chmod", "770");
    if (!provision_check_path($path . '/drush', "mkdir")) {
      #TODO Add error message.
      return false;
    }
  }
  if (provision_check_path($path, 'writeable')) {
    $file = fopen($path . '/drush/platform_' . $node->nid . '.php', 'w');
    fwrite($file, "<?php\n");
    $options['root'] = $node->publish_path;
    #todo - this needs to be unique...
    $options['uri'] = $web_server->title;
  
    fwrite($file, '$options = ' . var_export($options, true) . ";\n");
    fwrite($file, "if (file_exists('db_server.php')) { include_once('db_server.php'); }\n");
    fclose($file);
  }
  else {
    #TODO add error message
    return false;
  }
  
}


/**
 * Implementation hook_post_verify
 *
 * Sets the platform verified timestamp, to discren when it was verified.
 * Imports all the profiles and modules into package and package release nodes.
 */
function hosting_platform_hosting_post_verify($task, $data) {
  $platform = node_load($task->rid);
  $platform->verified = mktime(); // set verified flag on platform, to let it know it has been checked.

  // set the platform of the site
  if (is_array($data['site']['platform'])) {
    $info = $data['site']['platform'];
    hosting_package_import_packages($platform->nid, 'platform', $info['version'], array($info['short_name'] => $info));
    $release = hosting_get_package_release($info['short_name'], $info['version']);
    $platform->release_id = $release->nid;
  }
  node_save($platform);
  $platform_release = node_load($platform->release_id);

  hosting_delete_package_instances($platform->nid);
  hosting_package_import_packages($platform->nid, 'profile', $platform_release->version, $data['site']['profiles']);
  hosting_package_import_packages($platform->nid, 'module', $platform_release->version, $data['site']['modules']);
  hosting_package_import_packages($platform->nid, 'engine', $platform_release->version, $data['site']['engines']);
  hosting_package_import_packages($platform->nid, 'theme', $platform_release->version, $data['site']['themes']);

  foreach ($data['site']['sites'] as $url) {
    if (!hosting_site_exists($url)) {
      $site = new StdClass();
      $site->type = 'site';
      $site->site_status = HOSTING_SITE_IMPORTED;
      $site->title = $url;
      $site->platform = $platform->nid;
      $site->client = HOSTING_DEFAULT_CLIENT;
      node_save($site);
      hosting_task_log($task->vid, "notice", t("Imported existing site !domain", array('!domain' => _hosting_node_link($site->nid))));
    } 

  }
}

