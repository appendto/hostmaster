<?php
/**
 * @file Platform node type definition
 */

function hosting_platform_node_info() {
  #configuration
  $types["platform"] =  array(
    "type" => 'platform', "name" => 'Platform',
    "module" => 'hosting_platform',
    "has_title" => TRUE, "title_label" => t('Name'), 
    "description" => hosting_node_help("platform"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    

  return $types;
}

function hosting_platform_hosting_features() {
  return array('platform' => array(
      'title' => t('Multiple platforms (experimental)'), 
      'description' => t('Allow for management of multiple platforms, and migration between platforms.'),
      'status' => HOSTING_FEATURE_DISABLED),
      );
}


function hosting_platform_perm() {
  return array('create platform', 'view platform', 'edit platform', 'delete platform');
}

function hosting_platform_access($op, $node) {
  if (!hosting_feature('platform')) {
    return FALSE;
  }

  switch ($op) {
    case 'create':
      return user_access('create platform');
      break;
    case 'view': 
      return user_access('view platform');
      break;
    case 'update':
      return user_access('edit platform');
      break;
    case 'delete':
      return user_access('delete platform');
      break;
    default:
      break;
  }  
}

/**
 * Small helper function to get platforms.
*/ 
function _hosting_get_platforms() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='platform' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}


function hosting_map_values_platform($node) {
  $values['platform'] = $node->nid;
  $values['publish_path'] = $node->publish_path;

  $reference = node_load($node->web_server);
  $values = array_merge($values, hosting_map_values($reference));

  $values['#export_platform'] = array('publish_path', 'platform');
  return $values;
}

/**
 * Implementation of hook_form().
 */
function hosting_platform_form(&$node) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#description' => t('Choose a descriptive name for your platform.'),
    '#size' => 40,
    '#default_value' => $node->title,
    '#maxlength' => 255,
  );

  $form['publish_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Publish path'),
    '#required' => TRUE,
    '#description' => t('The path on the filesystem where the sites will be hosted.'),
    '#size' => 40,
    '#default_value' => $node->publish_path,
    '#maxlength' => 255,
  );

  $form['web_server'] = array(
    '#type' => 'radios',
    '#title' => t('Web server'),
    '#description' => t('The web server the sites will be hosted on.'),
    '#options' => _hosting_get_web_servers(),
    '#default_value' => ($node->web_server) ? $node->web_server : HOSTING_DEFAULT_WEB_SERVER,
  );
  
  return $form;
}



/**
 * Implementation of hook_insert().
 */
function hosting_platform_insert($node) {
  hosting_add_task($node->nid, 'synch');
  hosting_add_task($node->nid, 'verify');
  hosting_add_task($node->nid, 'import');
  db_query("INSERT INTO {hosting_platform} (vid, nid, publish_path, release_id, verified, web_server) VALUES (%d, %d, '%s', %d, %d, %d)",
    $node->vid, $node->nid, $node->publish_path, $node->release_id, $node->verified, $node->web_server);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_platform_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_platform_insert($node);
  }
  else {
    db_query("UPDATE {hosting_platform} SET publish_path = '%s', web_server = %d, release_id = %d, verified = %d WHERE nid=%d",
              $node->publish_path, $node->web_server, $node->release_id, $node->verified, $node->nid);
  }
}

function hosting_nodeapi_platform_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_platform} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_platform_delete($node) {
  db_query('DELETE FROM {hosting_platform} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_platform_load($node) {
  $additions = db_fetch_object(db_query('SELECT publish_path, release_id, verified, web_server FROM {hosting_platform} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_platform_view($node, $teaser = FALSE, $page = FALSE) {
  $node->content['release'] = array(
    '#type' => 'item',
    '#title' => t('Release'),
    '#value' => _hosting_node_link($node->release_id),
  );
 
  $node->content['web_server'] = array(
    '#type' => 'item',
    '#title' => t('Web server'),
    '#value' => _hosting_node_link($node->web_server),
  );

  $node->content['publish_path'] = array(
    '#type' => 'item',
    '#title' => t('Publish path'),
    '#value' => $node->publish_path,
  );
  
  $node->content['verified'] = array(
    '#type' => 'item',
    '#title' => t('Verified'),
    '#value' => hosting_format_interval($node->verified),
  );

  $node->content['sites_view'] = array(
    '#type' => 'item',
    '#title' => t("Sites"),
    '#value' => hosting_site_list("platform", $node->nid), 
    '#weight' => 10
  );

  if ($node->nid) {
    $node->content['tasks_view'] = array(
      '#type' => 'item',
      '#title' => t("Tasks"),
      '#value' => hosting_task_list("rid", $node->nid),
      '#weight' => 10
    );
  }
  return $node;
}


/**
 * Create the configuration file containing the drush details.
 *
 * Outside of web root. not readable by web server. _important_
 */
function _hosting_generate_platform_config_file($node) {
  if ($node->type != "platform") {
    return null;
  }
  $path = _provision_config_path();
  $web_server = node_load($node->web_server);

  if (!provision_check_path($path . '/drush', "is_dir")) {
    provision_check_path($path, "chmod", "770");
    if (!provision_check_path($path . '/drush', "mkdir")) {
      #TODO Add error message.
      return false;
    }
  }
  if (provision_check_path($path, 'writeable')) {
    $file = fopen($path . '/drush/platform_' . $node->nid . '.php', 'w');
    fwrite($file, "<?php\n");
    $options['root'] = $node->publish_path;
    #todo - this needs to be unique...
    $options['uri'] = $web_server->title;
  
    fwrite($file, '$options = ' . var_export($options, true) . ";\n");
    fwrite($file, "if (file_exists('db_server.php')) { include_once('db_server.php'); }\n");
    fclose($file);
  }
  else {
    #TODO add error message
    return false;
  }
  
}


/**
 * Implementation hook_post_verify
 *
 * Sets the platform verified timestamp, to discren when it was verified.
 * Imports all the profiles and modules into package and package release nodes.
 */
function hosting_platform_hosting_post_verify($task, $data) {
  $platform = node_load($task->rid);
  $platform->verified = mktime(); // set verified flag on platform, to let it know it has been checked.
  node_save($platform);
  $platform_release = node_load($platform->release_id);

  hosting_delete_package_instances($platform->nid);
  hosting_package_import_packages($platform->nid, 'profile', $platform_release->version, $data['site']['profiles']);
  hosting_package_import_packages($platform->nid, 'module', $platform_release->version, $data['site']['modules']);
  hosting_package_import_packages($platform->nid, 'engine', $platform_release->version, $data['site']['engines']);
  hosting_package_import_packages($platform->nid, 'theme', $platform_release->version, $data['site']['themes']);

  foreach ($data['site']['sites'] as $url) {
    if ($url == 'default') {
      hosting_task_log($task->vid, 'warning', t("A site has been found in the sites/default directory. Sites in this directory are not supported, and you should rename the site to something else before importing again"));
    }
    if (!hosting_site_exists($url) && ($url != 'default')) {
      hosting_task_log($task->vid, 'notice', t("We have detected sites on this platform that have not been imported yet, please create an Import task for this platform to make sure the system is up to date."));
      break;
    } 

  }
}

function hosting_platform_hosting_post_import($task, $data) {
  $platform = node_load($task->rid);

  if (sizeof($data['site']['sites'])) {
    foreach ($data['site']['sites'] as $url => $info) {
      if (!hosting_site_exists($url)) {
        hosting_add_site($url, $info['site_admin_email'], $platform->nid, $info['site_db_host'], $info['site_profile'], HOSTING_SITE_ENABLED | HOSTING_SITE_INSTALLED | HOSTING_SITE_IMPORTED, $info['site_language']);
      }
    }
  }
}
