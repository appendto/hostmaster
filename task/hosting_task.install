<?php
// $Id$


/**
 * Implementation of hook_schema().
 */
function hosting_task_schema() {
  $schema['hosting_task'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'task_type' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'rid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'task_status' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
      'executed' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
      'delta' => array('type' => 'int', 'not null' => FALSE),
    ),
    'primary key' => array('vid'),
  );

  $schema['hosting_task_arguments'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'value' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
    ),
  );

  $schema['hosting_task_log'] = array(
    'fields' => array(
      'lid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ),
      'message' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'error' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'type' => array('type'),
    ),
    'primary key' => array('lid'),
  );

  return $schema;
}

function hosting_task_install() {
  // Create tables.
  drupal_install_schema('hosting_task');
}

/**
 * Add the error column to hosting_task_log, so we can extract the
 * specific error codes, not just the messages.
 */
function hosting_task_update_1() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {hosting_task_log} 
    ADD COLUMN error longtext NOT NULL default ''");
  $ret[] = update_sql("ALTER TABLE {hosting_task_log} 
    DROP COLUMN severity");

  return $ret;
}

/**
 * Reset the task_status of all currently (according to us) in queue tasks
 *
 * This will force them to be re-evaluated if the queue status doesn't match the task status
 */
function hosting_task_update_2() {
  $ret = array();
  variable_set('hosting_dispatch_enabled', FALSE);
  // Put the queued items separately for a bit.
  db_query("UPDATE {hosting_task_queue} SET status = 100 WHERE status = 0");

  // Remove all the other items from the queue.
  db_query("UPDATE {hosting_task_queue} SET status = 0 WHERE status <> 100");

  // Add all the queued items back into the queue.
  db_query("UPDATE {hosting_task_queue} SET status = 1 WHERE status = 100");
  variable_set('hosting_dispatch_enabled', TRUE);
  return $ret;
}

/**
 * Add a delta column to tasks so that we have a measure of duration of tasks
 */
function hosting_task_update_6000() {
  $ret = array();
  db_add_field($ret, 'hosting_task', 'delta', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
  return $ret;
}

/**
 * remove the redundant hosting_queue table
 */
function hosting_task_update_6000() {
  $ret = array();
  db_drop_table('hosting_task_queue');
  return $ret;
}

