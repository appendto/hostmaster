<?php
/**
 * @file Web server node type is defined here.
 */
include_once('hosting_web_server.views.inc');

function hosting_web_server_node_info() {
  $types["web_server"] =  array(
    "type" => 'web_server', "name" => 'Web server',
    "module" => 'hosting_web_server',
    "has_title" => true, "title_label" => t('Host name'), 
    "description" => hosting_node_help("web_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  return $types;
}

function hosting_web_server_access($op, $node) {
  return hosting_access($op, $node);
}

function hosting_map_values_web_server($node) {
  $values['web_id'] = $node->nid;
  $values['web_host'] = $node->title;
  $values['web_host_uri'] = 'http://' . $node->title;
  $values['web_ip'] = $node->ip_address;  
  $values['web_script_user'] = $node->script_user;
  $values['web_group'] = $node->web_group;
  $values['web_config_path'] = $node->config_path;
  $values['web_backup_path'] = $node->backup_path;
  $values['web_restart_cmd'] = $node->restard_cmd;
  $values['#export_web_server'] = array('web_id', 'web_host', 'web_ip');
  return $values;
}

/**
 * Small helper function to get web servers.
*/ 
function _hosting_get_web_servers() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='web_server' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}

/**
 * Implementation of hook_form().
 */
function hosting_web_server_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Web server hostname'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#description' => t('The host name of the server. This is the address that will be used by Hostmaster to connect to the web server to issue commands.'),
    '#weight' => -5
  );
  #TODO : rename to db_ip_address, to avoid confusion
  $form['ip_address'] = array(
    '#type' => 'textfield',
    '#title' => t('IP address'),
    '#default_value' => $node->ip_address,
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => t("The IP address the server can be accessed by.<br />If this is empty, the hostname will be used instead.")
  );

  // merge the web server configuration.
  $form += provision_apache_provision_configure($node);

  return $form;
}

/**
 * Implementation of hook_validate().
  */
function hosting_web_server_validate(&$node) {
  # TODO : check paths. kind of tricky actually, due to multiple servers etc.
}

/**
 * Implementation of hook_insert().
 */
function hosting_web_server_insert($node) {
  db_query("INSERT INTO {hosting_web_server} (vid, nid, ip_address, script_user, web_group, config_path, backup_path, restart_cmd) 
      VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s')", 
        $node->vid, $node->nid, $node->ip_address, $node->script_user, $node->web_group, $node->config_path, $node->backup_path, $node->restart_cmd);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_web_server_update($node) {
  $platform = node_load(HOSTING_OWN_PLATFORM);
  if ($node->nid == $platform->web_server) {
    variable_set('provision_script_user', $node->script_user);
    variable_set('provision_web_group', $node->web_group);
    variable_set('provision_config_path', $node->config_path);
    variable_set('provision_backup_path', $node->backup_path);
    variable_set('provision_restart_cmd', $node->restart_cmd);
  }

  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_web_server_insert($node);
  }
  else {
    db_query("UPDATE {hosting_web_server} SET 
                  ip_address = '%s', script_user = '%s', web_group = '%s', 
                  config_path = '%s', backup_path = '%s', restart_cmd = '%s'
              WHERE 
                  vid = %d", 
                  $node->ip_address, $node->script_user, $node->web_group,
                  $node->config_path, $node->backup_path, $node->restart_cmd, 
                  $node->vid);
  }
}

function hosting_nodeapi_web_server_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_web_server} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_web_server_delete($node) {
  db_query('DELETE FROM {hosting_web_server} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_web_server_load($node) {
  $additions = db_fetch_object(db_query('SELECT ip_address, script_user, web_group, config_path, backup_path, restart_cmd FROM {hosting_web_server} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_web_server_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if ($node->ip_address) {
    $node->content['ip_address'] = array(
      '#type' => 'item',
      '#title' => t('IP address'),
      '#value' => $node->ip_address,
    );    
  }
  $node->content['script_user'] = array(
    '#type' => 'item',
    '#title' => t('Script user'),
    '#value' => $node->script_user,
  );
  $node->content['web_group'] = array(
    '#type' => 'item',
    '#title' => t('Web server group'),
    '#value' => $node->web_group,
  );
  $node->content['config_path'] = array(
    '#type' => 'item',
    '#title' => t('Configuration path'),
    '#value' => $node->config_path,
  );
  $node->content['backup_path'] = array(
    '#type' => 'item',
    '#title' => t('Backup path'),
    '#value' => $node->backup_path,
  );
   $node->content['restart_cmd'] = array(
    '#type' => 'item',
    '#title' => t('Restart command'),
    '#value' => $node->restart_cmd,
  );
  
  return $node;
}

