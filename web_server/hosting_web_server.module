<?php
/**
 * @file Web server node type is defined here.
 */

function hosting_web_server_node_info() {
  $types["web_server"] =  array(
    "type" => 'web_server', "name" => 'Web server',
    "module" => 'hosting_web_server',
    "has_title" => true, "title_label" => t('Host name'), 
    "description" => hosting_node_help("web_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  return $types;
}

function hosting_web_server_hosting_features() {
  return array('web_server' => array(
      'title' => t('Manage multiple servers (experimental)'), 
      'description' => t('Allow for creation of multiple web server nodes, and for distributed management of sites.'),
      'status' => HOSTING_FEATURE_DISABLED));
}

function hosting_web_server_perm() {
  return array('create web server', 'view web server', 'edit web server', 'delete web server');
}

function hosting_web_server_access($op, $node) {
  if (!hosting_feature('web_server')) {
    return FALSE;
  }
  switch ($op) {
    case 'create':
      return user_access('create web server');
      break;
    case 'view':
      return user_access('view web server');
      break;
    case 'update':
      return user_access('edit web server');
      break;
    case 'delete':
      return user_access('delete web server');
      break;
    default:
      break;
  }
}
function hosting_web_server_provision_args($node, $task = '') {
  $values = array();
  if (in_array($node->type, array('site', 'platform'))) {
    $web = node_load($node->web_server);
    $values['web_id'] = $web->nid;
    $values['web_host'] = $web->title;
    $values['web_ip'] = $web->ip_address;
    if ($task == 'synch' && $node->type == 'platform') {
        $values['script_user'] = $web->script_user;
        $values['web_group'] = $web->web_group;
        $values['config_path'] = $web->config_path;
        $values['backup_path'] = $web->backup_path;
        $values['restart_cmd'] = $web->restart_cmd;
    }
  }
  return $values;
}

/**
 * Small helper function to get web servers.
*/ 
function _hosting_get_web_servers() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='web_server' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}

/**
 * Implementation of hook_form().
 */
function hosting_web_server_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Web server hostname'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#description' => t('The host name of the server. This is the address that will be used by Hostmaster to connect to the web server to issue commands.'),
    '#weight' => -5
  );
  #TODO : rename to db_ip_address, to avoid confusion
  $form['ip_address'] = array(
    '#type' => 'textfield',
    '#title' => t('IP address'),
    '#default_value' => $node->ip_address,
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => t("The IP address the server can be accessed by.<br />If this is empty, the hostname will be used instead.")
  );


  $form['restart_cmd'] = array(
      '#type' => 'textfield',
      '#title' => t('Restart command'),
      '#required' => TRUE,
      '#description' => t('The command to run to restart the for new changes to take effect. This is required for the new site to become live'),
      '#default_value' => ($node->restart_cmd) ? $node->restart_cmd : PROVISION_RESTART_CMD,
      '#size' => 40,
      '#maxlength' => 255,
      '#weight' => -20,
  );

  $form['script_user'] = array(
    '#type' => 'textfield',
    '#title' => t('System account'),
    '#required' => TRUE,
    '#description' => t('The system account that the hosted files will belong to, for security reasons.<br />This should be a different to the account the web server is running as.'),
    '#default_value' => ($node->script_user) ? $node->script_user : PROVISION_SCRIPT_USER,
    '#size' => 20,
    '#maxlength' => 255,
    '#weight' => -15,
  );
   
  $form['web_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Web server group'),
    '#required' => TRUE,
    '#description' => t('The group that the hosted files will belong to.<br />This should be the group the web server is running as.'),
    '#default_value' => ($node->web_group) ? $node->web_group : PROVISION_WEB_GROUP,
    '#size' => 20,
    '#maxlength' => 75,
    '#validate' => array('hosting_validate_web_group' => array()),
    '#weight' => -10,
  );
  
  $form['config_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Configuration path'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => ($node->config_path) ? $node->config_path : PROVISION_CONFIG_PATH,
    '#description' => t("The path on the server where configuration files will be stored.<br />
        It is essential that this directory should not be accessible via a web browser."),
    '#maxlength' => 255,
    '#weight' => -10,
  );
  
  $form['backup_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Backup path'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => ($node->backup_path) ? $node->backup_path : PROVISION_BACKUP_PATH,
    '#description' => t("The path on the server where backups will be stored.<br />
        It is essential that this directory should not be accessible via a web browser."),
    '#maxlength' => 255,
    '#weight' => -10,
  );
  

  return $form;
}

function hosting_validate_web_group($element) {
  $user = $element['#post']['script_user'];
  $group = $element['#post']['web_group'];
  if ($user && $group) {
    if (!provision_user_in_group($user, $group)) {
       form_set_error('web_group', t("The %user user is not in the %group group. For information on how to fix this, please check the !link.", 
         array('%user' => $user, '%group' =>  $group, '!link' => l(t("provisioning requirements"), "admin/help/provision/requirements") )));
    }
  }
}

/**
 * Implementation of hook_validate().
  */
function hosting_web_server_validate(&$node) {
  # TODO : check paths. kind of tricky actually, due to multiple servers etc.
}

/**
 * Implementation of hook_insert().
 */
function hosting_web_server_insert($node) {
  db_query("INSERT INTO {hosting_web_server} (vid, nid, ip_address, script_user, web_group, config_path, backup_path, restart_cmd) 
      VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s')", 
        $node->vid, $node->nid, $node->ip_address, $node->script_user, $node->web_group, $node->config_path, $node->backup_path, $node->restart_cmd);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_web_server_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_web_server_insert($node);
  }
  else {
    db_query("UPDATE {hosting_web_server} SET 
                  ip_address = '%s', script_user = '%s', web_group = '%s', 
                  config_path = '%s', backup_path = '%s', restart_cmd = '%s'
              WHERE 
                  vid = %d", 
                  $node->ip_address, $node->script_user, $node->web_group,
                  $node->config_path, $node->backup_path, $node->restart_cmd, 
                  $node->vid);
  }
}

function hosting_nodeapi_web_server_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_web_server} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_web_server_delete($node) {
  db_query('DELETE FROM {hosting_web_server} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_web_server_load($node) {
  $additions = db_fetch_object(db_query('SELECT ip_address, script_user, web_group, config_path, backup_path, restart_cmd FROM {hosting_web_server} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_web_server_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if ($node->ip_address) {
    $node->content['ip_address'] = array(
      '#type' => 'item',
      '#title' => t('IP address'),
      '#value' => filter_xss($node->ip_address),
    );    
  }
  $node->content['script_user'] = array(
    '#type' => 'item',
    '#title' => t('Script user'),
    '#value' => filter_xss($node->script_user),
  );
  $node->content['web_group'] = array(
    '#type' => 'item',
    '#title' => t('Web server group'),
    '#value' => filter_xss($node->web_group),
  );
  $node->content['config_path'] = array(
    '#type' => 'item',
    '#title' => t('Configuration path'),
    '#value' => filter_xss($node->config_path),
  );
  $node->content['backup_path'] = array(
    '#type' => 'item',
    '#title' => t('Backup path'),
    '#value' => filter_xss($node->backup_path),
  );
   $node->content['restart_cmd'] = array(
    '#type' => 'item',
    '#title' => t('Restart command'),
    '#value' => filter_xss($node->restart_cmd),
  );
  
  return $node;
}

