<?php
// $Id$ 

function hosting_install() {
  db_query("UPDATE {system} SET weight = 10 WHERE type='module' and name='hosting'");
  drupal_install_schema('hosting');
}

function hosting_schema() {
  $schema['hosting_context'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
     ),
    'primary key' => array('nid'),
    'unique keys' => array(
      'name'     => array('name')
    ),    
  
  );
  return $schema;
}

function hosting_update_1() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 10 WHERE type='module' and name='hosting'");
  return $ret;
}

/**
 * Update function to remove unused table
 */
function hosting_update_2() {
  $ret = array();
  $ret[] = update_sql("DROP TABLE {hosting_config_template}");
  return $ret;
}

/**
 * Hide hostmaster and hostslave profiles
 */
function hosting_update_3() {
  $ret = array();
  $result = db_query("select n.nid from {node} n left join hosting_package p on n.nid = p.nid where short_name in ('hostslave', 'hostmaster')");
  while ($obj = db_fetch_object($result)) {
    $in[] = (int) $obj->nid;
  }
  $in = implode(", ", $in);
  $ret[] = update_sql("UPDATE {node} SET status = 0 WHERE nid IN (" .$in. ")", $values);
  return $ret;
}

/**
 * Enable the modalframe and jquery_ui modules
 */
function hosting_update_6000() {
  $ret = array();
  module_enable(array('modalframe', 'jquery_ui'));
  return $ret;
}

/**
 * Change the default configured blocks to match eldir
 */
function hosting_update_6001() {
  $ret = array();
  module_enable(array('install_profile_api'));
  drupal_load('module', 'install_profile_api');
  install_include(array('block'));

  $theme = 'eldir';
  install_disable_block('hosting', 'hosting_queues_summary', $theme);
  install_set_block('user', 0 , $theme, 'right', 0);
  install_set_block('user', 1 , $theme, 'right', 0);
  install_set_block('hosting', 'hosting_queues', $theme, 'right', 5);
  install_set_block('hosting', 'hosting_summary', $theme, 'right', 10);

  return $ret;
}

/**
 * re-verify at least one platform and all sites
 */

function hosting_update_6002() {
  include_once(drupal_get_path('module', 'hosting_task') .  '/hosting_task.module');

  $ret = array();
   $result = db_query("SELECT nid FROM {node} WHERE type='platform' AND status=1");
  if ($platform = db_fetch_object($result)) {
    $ret[] = array('success' => TRUE, 'query' => "Re-verify scheduled for platform ". $platform->nid);
    hosting_add_task($platform->nid, 'verify');
  } else {
    drupal_set_message(t("No platform found"));
  }

  $result = db_query("SELECT n.nid FROM {node} n INNER JOIN hosting_site s on s.nid = n.nid WHERE n.type='site' AND s.status=1");
  while ($site = db_fetch_object($result)) {
    $ret[] = array('success' => TRUE, 'query' => "Re-verify scheduled for site ". $site->nid);
    hosting_add_task($site->nid, 'verify');
  }
  return $ret;
}

/**
 * Lower the default amount of concurrent tasks
 */
function hosting_update_6003() {
  $ret = array();
  variable_set('hosting_queue_tasks_items', 5);
  return $ret;
}

/**
 * Stricter initial permissions for the anonymous user.
 */
function hosting_update_6004() {
  $ret = array();
  install_include(array('user'));

  install_remove_permissions(install_get_rid('anonymous user'), array('access content', 'access all views'));
  install_remove_permissions(install_get_rid('authenticated user'), array('access content', 'access all views'));

  return $ret;
}

/**
 * Move some menu items to the primary links menu.
 */
function hosting_update_6005() {
  drupal_install_modules(array('hosting_server'));
  hosting_menu_rebuild();

  install_include(array('menu'));
  $menu_name = variable_get('menu_primary_links_source', 'primary-links');

  $items = install_menu_get_items('hosting/servers');
  $item = db_fetch_array(db_query("SELECT * FROM {menu_links} WHERE mlid = %d", $items[0]['mlid']));
  $item['menu_name'] = $menu_name;
  $item['customized'] = 1;
  $item['options'] = unserialize($item['options']);
  install_menu_update_menu_item($item);

  $items = install_menu_get_items('hosting/sites');
  $item = db_fetch_array(db_query("SELECT * FROM {menu_links} WHERE mlid = %d", $items[0]['mlid']));
  $item['menu_name'] = $menu_name;
  $item['customized'] = 1;
  $item['options'] = unserialize($item['options']);
  install_menu_update_menu_item($item);

  hosting_menu_rebuild();
  return array();
}

/**
 * move the platforms into primary links
 */
function hosting_update_6006() {
  install_include(array('menu'));
  $menu_name = variable_get('menu_primary_links_source', 'primary-links');


  $items = install_menu_get_items('hosting/platforms');
  $item = db_fetch_array(db_query("SELECT * FROM {menu_links} WHERE mlid = %d", $items[0]['mlid']));
  $item['menu_name'] = $menu_name;
  $item['customized'] = 1;
  $item['options'] = unserialize($item['options']);
  install_menu_update_menu_item($item);



  return array();
}

/**
 * Update the default db_server now that we've merged the webserver and dbserver nodes
 * See http://drupal.org/node/731550
 */
function hosting_update_6007() {
  variable_set('hosting_default_db_server', variable_get('hosting_default_web_server', 3));
  variable_set('hosting_own_db_server', variable_get('hosting_default_web_server', 3));
  return array();
}

/**
 * Add hosting_context table to map alias names.
 */
function hosting_update_6008() {
  $return = array();

  db_create_table($return, 'hosting_context', array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
     ),
    'primary key' => array('nid'),
    'unique keys' => array(
      'name'     => array('name')
    ),    
  ));

  $records = array();

  

  $result = db_query("SELECT n.nid, title FROM {node} n LEFT JOIN {hosting_site} s ON n.nid=s.nid WHERE s.status <> -2 AND n.type='site'");
  while ($object = db_fetch_object($result)) {
    $records[$object->nid] = $object->title;
  }

  $result =  db_query("SELECT n.nid, title FROM {node} n LEFT JOIN {hosting_server} s ON n.nid=s.nid WHERE n.status = 1 AND n.type='server'");
  while ($object = db_fetch_object($result)) {
    $records[$object->nid] = 'server_' . preg_replace("/[!\W\.\-]/", "", $object->title);
  }

  $result = db_query("SELECT nid, title FROM {node} WHERE type='platform'");
  while ($object = db_fetch_object($result)) {
    $records[$object->nid] = 'platform_' . preg_replace("/[!\W]/", "", $object->title);
  }

  // we want to enforce that the hostmaster site is always referred to as @hostmaster
  $own_site = db_result(db_query("SELECT s.nid FROM {hosting_site} s LEFT JOIN {hosting_package} p ON s.profile=p.nid WHERE p.short_name='hostmaster'"));
  $records[$own_site] = 'hostmaster';
  
  // We start with the web server because we assume that the main hostmaster site is installed locally.
  $node = node_load($own_site);

  $server = node_load($node->web_server);
  $server->title = 'localhost';
  node_save($server);

  $records[$server->nid] = 'server_localhost';

  foreach ($records as $nid => $name) {
    db_query("INSERT INTO {hosting_context} (nid, name) VALUES (%d, '%s')", $nid, $name);
  }
  return $return;
}

