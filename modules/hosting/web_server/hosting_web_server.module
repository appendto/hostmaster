<?php
/**
 * @file Web server node type is defined here.
 */
include_once('hosting_web_server.help.inc');

/**
 * Implementation of hook_hosting_service()
 *
 * @see hosting_help_requirements()
 */
function hosting_web_server_hosting_service() {
  return array( "web_server" => t("Web Server"));
}

/**
 * "Feature" definition
 *
 * @see hosting.features.inc
 */
function hosting_web_server_hosting_feature() {
  $features['web_server'] = array(
      'title' => t('Web servers'), 
      'description' => t('Allow for creation of multiple web server nodes, and for distributed management of sites.'),
      'status' => HOSTING_FEATURE_DISABLED,
      'node' => 'web_server',
    'group' => 'experimental');
  $features['ports'] = array(
      'title' => t('Ports'),
      'description' => t('Allow configuration of multiple ports per server and non-default ports for sites.'),
      'status' => HOSTING_FEATURE_ENABLED,
  );
  return $features;
}

/**
 * Small helper function to get web servers.
 *
 * @return array pairs of nid -> title of enabled webservers
 */ 
function _hosting_get_web_servers() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='web_server' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}


/**
 * Implementation of hook_nodeapi();
 */
function hosting_web_server_nodeapi_server_form($node, $op, $teaser) {

}





/**
 * Implementation of hook_form().
 */
function hosting_web_server_form(&$node) {
  if (hosting_feature('ports') == HOSTING_FEATURE_ENABLED) {
    $form['ports'] = array(
      '#type' => 'textfield',
      '#title' => t('Ports'),
      '#required' => TRUE,
      '#size' => 40,
      '#default_value' => ($node->ports) ? $node->ports : '80',
      '#description' => t("All the ports enabled on this server, comma separated. Port 80 is the default http, 443 is https."),
      '#maxlength' => 255,
      '#weight' => -8,
    );
  } else {
    $form['ports'] = array(
      '#type' => 'value',
      '#value' => '80',
    );
  }
  
  $form['restart_cmd'] = array(
      '#type' => 'textfield',
      '#title' => t('Restart command'),
      '#required' => TRUE,
      '#description' => t('The command to run to restart the web server for new changes to take effect. This is required for the new site to become live'),
      '#default_value' => ($node->restart_cmd) ? $node->restart_cmd : HOSTING_DEFAULT_RESTART_CMD,
      '#size' => 40,
      '#maxlength' => 255,
      '#weight' => -7,
  );

  
  $form['web_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Web server group'),
    '#required' => TRUE,
    '#description' => t('The group that the hosted files will belong to.<br />This should be the group the web server is running as.'),
    '#default_value' => ($node->web_group) ? $node->web_group : HOSTING_DEFAULT_WEB_GROUP,
    '#size' => 20,
    '#maxlength' => 75,
    '#weight' => -5,
  );
  

  return $form;
}

function hosting_nodeapi_web_server_presave(&$node) {

  if (!$node->ip_address) {
    $ip = gethostbyname($node->title);

    // setup IP only if resolution succeeded
    if ($ip != $node->title) {
      $node->ip_address = $ip; // required to fool the ip check below
      drupal_set_message(t('Initialized the webserver IP to %ip based on hostname %name. This will be used to create database grants so make sure it is the right address, as seen from the database server.', array('%ip' => $ip, '%name' => $node->title)), 'message');
    } else {
      form_set_error('title', t('Could not resolve IP address of webserver %name. Either set the web server name to a FQDN (Fully Qualified Domain Name) or hardcode the IP here.', array('%name' => $node->title)));
    }
  }

}

/**
 * Implementation of hook_validate().
  */
function hosting_web_server_validate(&$node, &$form) {

  $ports = explode(",", $node->ports);
  if (count($ports) < 1) {
    form_set_error('ports', t('At least one port must be provided.'));
  }
  foreach($ports as $port) {
    if ($port < 1) {
      form_set_error('ports', t('Invalid port specified'));
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function hosting_web_server_insert($node) {
  print_r($form);
  db_query("INSERT INTO {hosting_web_server} (vid, nid, web_group, restart_cmd, ports) 
      VALUES (%d, %d, '%s', '%s', '%s', '%s')", 
        $node->vid, $node->nid, $node->web_group, $node->restart_cmd, $node->ports);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 *
 * This will fire up a verify task if the webserver ports have changed.
 */
function hosting_web_server_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_web_server_insert($node);
  }
  else {
    $oldports = db_result(db_query("SELECT ports FROM {hosting_web_server} WHERE vid = %d", $node->vid));
    if ($oldports != $node->ports) {
      $query = db_query("SELECT nid FROM {hosting_platform} WHERE web_server = %d", $node->nid);
      while($nid = db_fetch_object($query)) {
        hosting_add_task($nid->nid, 'verify');
      }
    }
    db_query("UPDATE {hosting_web_server} SET 
                  web_group = '%s', 
                  restart_cmd = '%s',
                  ports = '%s'
              WHERE 
                  vid = %d", 
                  $node->web_group,
                  $node->restart_cmd, 
                  $node->ports,
                  $node->vid);
  }
}

/**
 * Implementation of hook_delete_revision().
 */
function hosting_nodeapi_web_server_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_web_server} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_web_server_delete($node) {
  db_query('DELETE FROM {hosting_web_server} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_web_server_load($node) {
  $additions = db_fetch_object(db_query('SELECT web_group, restart_cmd, ports FROM {hosting_web_server} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_web_server_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if (hosting_feature('ports') == HOSTING_FEATURE_ENABLED) {
    $node->content['info']['ports'] = array(
      '#type' => 'item',
      '#title' => t('Ports'),
      '#value' => $node->ports,
    );
  }
  $node->content['info']['web_group'] = array(
    '#type' => 'item',
    '#title' => t('Web server group'),
    '#value' => filter_xss($node->web_group),
  );
  $node->content['info']['restart_cmd'] = array(
    '#type' => 'item',
    '#title' => t('Restart command'),
    '#value' => filter_xss($node->restart_cmd),
  );
  
  return $node;
}

/**
 * Implementation of hook_hosting_summary().
 */
function hosting_web_server_hosting_summary() {
  $summary = array();
  $web_servers = _hosting_get_web_servers();
  $summary['web_servers'] = theme('item_list', array_map('_hosting_node_link', array_keys($web_servers)), t('Web servers'));
  return $summary;
}

/**
 * Implementation of hook_form_alter()
 *
 * This makes sure we have a proper IP address defined for the webserver. It
 * will change the IP address field only if:
 *
 * 1. it is not already set, and;
 * 2. if it resolves properly
 */
function hosting_web_server_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'server_node_form':
      if ($form['#post']['op'] == 'Preview' && !$form['#post']['ip_address']) {
        $ip = gethostbyname($form['#post']['title']);
        // setup IP only if resolution succeeded
        if ($ip != $node->title) {
          drupal_set_message(t('Initialized the webserver IP to %ip based on hostname %name', array('%ip' => $ip, '%name' => $form['#post']['title'])), 'message');
          $form['#post']['ip_address'] = $ip;
        }
      }
      break;
  }
}
