<?php

define('HOSTING_PLATFORM_DELETED', -2);
define('HOSTING_PLATFORM_LOCKED', -1);
define('HOSTING_PLATFORM_QUEUED', 0);
define('HOSTING_PLATFORM_ENABLED', 1);

/**
 * Implementation of hook_menu().
 */
function hosting_platform_menu() {
  $items = array();
  $items['hosting/platforms'] = array(
    'title' => 'Platforms',
    'description' => 'List of platforms',
    'page callback' => 'hosting_platform_listing',
    'access arguments' => array('view platform'));

  return $items;
}

/**
 * @file Platform node type definition
 */

function hosting_platform_node_info() {
  #configuration
  $types["platform"] =  array(
    "type" => 'platform', "name" => 'Platform',
    "module" => 'hosting_platform',
    "has_title" => TRUE, "title_label" => t('Name'), 
    "description" => hosting_node_help("platform"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    

  return $types;
}

/**
 * Implementation of hook_hosting_tasks()
 */
function hosting_platform_hosting_tasks() {
  $tasks = array();
  $tasks['platform']['verify'] = array(
    'title' => t('Verify'),
    'description' => t('Verify that the platform is correctly installed and working.'),
    'weight' => 10,
  );
  $tasks['platform']['delete'] = array(
    'title' => t('Delete'),
    'description' => t('Deleting this platform will completely remove it from the hosting system.
        This process can not be undone. It can not be performed if you have sites currently
        running on this platform.
        Are you really sure you want to delete this platform?'),
    'weight' => 10,
  );
  $tasks['platform']['lock'] = array(
    'title' => t('Lock'),
    'description' => t('Locking this platform will not delete or disable it or its sites, but will
        prevent any new sites from being created on it. This may be useful when you have sites that
        cannot be migrated onto a newer platform, but you wish to prevent other administrators or
        clients from continuing to provision on this platform. The platform can be unlocked later.
        Are you really sure you want to lock this platform?'),
    'weight' => 10,
  );
  $tasks['platform']['unlock'] = array(
    'title' => t('Unlock'),
    'description' => t('Unlocking this platform will allow sites to be provisioned on it. 
        Are you really sure you want to unlock this platform?'),
    'weight' => 10,
  );
  return $tasks;
}

/**
 * Implementation of hook_hosting_feature()
 */
function hosting_platform_hosting_feature() {
  $features['platform'] = array(
      'title' => t('Platforms'), 
      'description' => t('Allow for management of multiple platforms.'),
      'status' => HOSTING_FEATURE_ENABLED,
      'node' => 'platform');
  return $features;
}

/**
 * Implementation of hook_perm()
 */
function hosting_platform_perm() {
  return array('create platform', 'view platform', 'edit platform', 'delete platform', 'view locked platforms');
}

/**
 * Implementation of hook_access()
 */
function hosting_platform_access($op, $node, $account) {
  if (!hosting_feature('platform')) {
    return FALSE;
  }

  switch ($op) {
    case 'create':
      return user_access('create platform', $account);
      break;
    case 'update':
      return user_access('edit platform', $account);
      break;
  } 
}

/**
 * Small helper function to get platforms that haven't been deleted.
 */ 
function _hosting_get_platforms() {
  $return = array();
  $result = db_query("SELECT n.nid, n.title FROM {node} n LEFT JOIN {hosting_platform} h ON n.nid = h.nid WHERE n.type='platform' AND n.status=1 AND h.status <> '%d'", HOSTING_PLATFORM_DELETED);
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}

/**
 * Small helper function to get platforms that haven't been deleted or locked.
 */
function _hosting_get_enabled_platforms() {
  $return = array();
  $result = db_query("SELECT n.nid, n.title FROM {node} n LEFT JOIN {hosting_platform} h ON n.nid = h.nid WHERE n.type='platform' AND n.status=1 AND h.status > '%d'", HOSTING_PLATFORM_LOCKED);
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}

/**
 * Small helper function to get platforms that have been locked.
 */
function _hosting_get_locked_platforms() {
  $return = array();
  $result = db_query("SELECT n.nid, n.title FROM {node} n LEFT JOIN {hosting_platform} h ON n.nid = h.nid WHERE n.type='platform' AND n.status=1 AND h.status = '%d'", HOSTING_PLATFORM_LOCKED);
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}

/**
 * Implementation of hook_form().
 */
function hosting_platform_form(&$node) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#description' => t('Choose a descriptive name for your platform. You very likely want this to be something like "Drupal 6.10".'),
    '#size' => 40,
    '#default_value' => $node->title,
    '#maxlength' => 255,
  );

  $form['publish_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Publish path'),
    '#required' => TRUE,
    '#description' => t('The path on the filesystem where the sites will be hosted. This needs to be created manually and initialized before your platform works properly. Use the following shell commands:<pre>%commands</pre>', array('%commands' => "cd /var/aegir\n./drush/drush.php dl drupal\n")),
    '#size' => 40,
    '#default_value' => $node->publish_path,
    '#maxlength' => 255,
  );

  $servers = _hosting_get_web_servers();
  if (sizeof($servers) > 1) {
    $form['web_server'] = array(
      '#type' => 'radios',
      '#title' => t('Web server'),
      '#description' => t('The web server the sites will be hosted on.'),
      '#options' => $servers,
      '#default_value' => ($node->web_server) ? $node->web_server : HOSTING_DEFAULT_WEB_SERVER,
    );
  }
  else {
    $form['web_server'] = array('#type' => 'hidden', '#value' => key($servers));
  }

  if ($node->nid != HOSTING_DEFAULT_PLATFORM) {
    $form['default_platform'] = array(
      '#type' => 'checkbox',
      '#return_value' => 1,
      '#title' => t('Make default platform for new sites'),
    );
  } else {
    $form['default_platform'] = array(
      '#type' => 'value', 
      '#value' => 1
    );
  }
  return $form;
}

/**
 * Hide the delete button on platform nodes
 */
function hosting_platform_form_alter(&$form, &$form_state, $form_id) {
  // Remove delete button from platform edit form, unless the platform's already been deleted via the Delete task
  if ($form_id == 'platform_node_form') {
    $node = $form['#node'];
    if ($node->platform_status !== '-2') {
      $form['buttons']['delete']['#type'] = 'hidden';
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function hosting_platform_insert($node) {
  if ($node->default_platform == 1) {
    variable_set('hosting_default_platform', $node->nid);
  }
  if (!isset($node->no_verify)) {
    hosting_add_task($node->nid, 'verify');
  }
  db_query("INSERT INTO {hosting_platform} (vid, nid, publish_path, verified, web_server, status) VALUES (%d, %d, '%s', %d, %d, %d)",
    $node->vid, $node->nid, $node->publish_path, $node->verified, $node->web_server, $node->platform_status);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_platform_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_platform_insert($node);
  }
  else {
    if ($node->default_platform == 1) {
      variable_set('hosting_default_platform', $node->nid);
    }
    db_query("UPDATE {hosting_platform} SET publish_path = '%s', web_server = %d, verified = %d, status= %d WHERE nid=%d",
              $node->publish_path, $node->web_server, $node->verified, $node->platform_status, $node->nid);
  }
}

/**
 * Implementation of hook_nodeapi_delete_revision()
 */
function hosting_nodeapi_platform_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_platform} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_platform_delete($node) {
  db_query('DELETE FROM {hosting_platform} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {hosting_package_instance} WHERE rid=%d', $node->nid);
  $result = db_query("SELECT distinct nid FROM {hosting_task} WHERE rid=%d", $node->nid);
  while ($nid = db_fetch_object($result)) {
    node_delete($nid->nid);
  }
  $result = db_query("SELECT distinct nid FROM {hosting_site} WHERE platform=%d", $node->nid);
  while ($nid = db_fetch_object($result)) {
    node_delete($nid->nid);
  }
}

/**
 * Implementation of hook_validate()
 */
function hosting_platform_validate($node, &$form) {
  if ($node->op != t('Delete') && $result = db_fetch_object(db_query("SELECT n.title AS name FROM {hosting_platform} AS h INNER JOIN {node} AS n ON n.nid = h.nid WHERE publish_path = '%s' AND web_server = %d AND n.nid <> %d AND h.status >= %d", hosting_path_normalize($node->publish_path), $node->web_server, $node->nid, HOSTING_PLATFORM_QUEUED))) {
    form_set_error('publish_path', t('Path already defined in platform %name', array('%name' => $result->name)));
  }
}

/**
 * Implementation of hook_load().
 */
function hosting_platform_load($node) {
  $additions = db_fetch_object(db_query('SELECT publish_path, verified, web_server, status AS platform_status FROM {hosting_platform} WHERE vid = %d', $node->vid));
  $iid = db_result(db_query("SELECT iid FROM {hosting_package_instance} i left join {hosting_package} p on p.nid=i.package_id WHERE p.package_type='platform' AND i.rid=%d", $node->nid));
  $additions->release = hosting_package_instance_load($iid);
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_platform_view($node, $teaser = FALSE, $page = FALSE) {


  modalframe_parent_js();
  $node->content['info'] = array(
    '#prefix' => '<div id="hosting-platform-info">',
    '#suffix' => '</div>'
  );

  $node->content['info']['verified'] = array(
    '#type' => 'item',
    '#title' => t('Verified'),
    '#value' => hosting_format_interval($node->verified),
    '#weight' => -10
  );

  $node->content['info']['publish_path'] = array(
    '#type' => 'item',
    '#title' => t('Publish path'),
    '#value' => filter_xss($node->publish_path),
    '#weight' => -8
  );
 
  $node->content['info']['web_server'] = array(
    '#type' => 'item',
    '#title' => t('Web server'),
    '#value' => _hosting_node_link($node->web_server),
    '#weight' => -7
  );
  $node->content['info']['status'] = array(
    '#type' => 'item',
    '#title' => t('Status'),
    '#value' => _hosting_platform_status($node),
  );

  if ($node->release) {
    $release = sprintf("%s %s", $node->release->title, $node->release->version);
     $node->content['info']['release'] = array(
      '#type' => 'item',
      '#title' => t('Release'),
      '#value' => _hosting_node_link($node->release->nid, $release),
      '#weight' => -6
    );
  }
  
  if ($node->nid == HOSTING_DEFAULT_PLATFORM) {
    $node->content['info']['default_platform'] = array(
      '#type' => 'item',
      '#description' => t('This platform is the default platform for new sites'),
    );
  }

  if ($page) {
    $node->content['sites_view'] = array(
      '#type' => 'item',
      '#value' => hosting_site_list("platform", $node->nid),
      '#prefix' => '<div id="hosting-site-list">',
      '#suffix' => '</div>',
      '#weight' => 10
    );

    if ($node->nid) {
      $node->content['tasks_view'] = array(
        '#type' => 'item',
        '#value' => hosting_task_table($node),
        '#prefix' => '<div id="hosting-task-list">',
        '#suffix' => '</div>',
        '#weight' => 10 
      );
      $settings['hostingTaskRefresh'] = array(
        'nid' => $node->nid,
        'changed' => $node->changed,
      );
      drupal_add_js($settings, 'setting');

      drupal_add_js(drupal_get_path('module','hosting_task') . '/hosting_task.js');
    }
  }
  return $node;
}

function _hosting_platform_status($node) {
  static $labels = array(
    HOSTING_PLATFORM_QUEUED => "Queued",
    HOSTING_PLATFORM_ENABLED => "Enabled",
    HOSTING_PLATFORM_DELETED => "Deleted",
    HOSTING_PLATFORM_LOCKED => "Locked",
  );
  return $labels[$node->platform_status];
}

/**
 * Implementation of hook_hosting_summary()
 */
function hosting_platform_hosting_summary() {
  $summary = array();
  if (user_access('view locked platforms')) {
    $platforms = _hosting_get_platforms();
    $summary['platforms'] = theme('item_list', array_map('_hosting_node_link', array_keys($platforms)), t('Platforms'));
  }
  else if (user_access('view platform')) {
    $platforms = _hosting_get_enabled_platforms();
    $summary['platforms'] = theme('item_list', array_map('_hosting_node_link', array_keys($platforms)), t('Platforms'));
  }
  return $summary;
}

/**
 * Views integration
 */
function hosting_platform_views_api() {
  return array(
    'api' => 2, 
    'path' => drupal_get_path('module', 'hosting_platform'),
  );
}


/**
 * Define the classes that correspond to the platform status.
 */
function _hosting_platform_list_class($node) {
  static $labels = array(
    HOSTING_PLATFORM_QUEUED => "hosting-queue",
    HOSTING_PLATFORM_ENABLED => "hosting-success",
    HOSTING_PLATFORM_DELETED => "hosting-error",
    HOSTING_PLATFORM_LOCKED => "hosting-warning",
  );

  return $labels[$node->platform_status]; 
}

/**
 * Simple list for top level navigation
 */

function hosting_platform_listing() {
  $platforms = _hosting_get_platforms();

  $header = array(t('Platform') , t('Release'), t('Server'), t('Verified'));

  $rows[] = array();

  foreach ($platforms as $nid => $title) {
    $row = array();
    $node = node_load($nid);
    $row[] = array('class' => 'hosting-status' , 'data' => _hosting_node_link($nid));
    $release = sprintf("%s %s", $node->release->title, $node->release->version);
    $row[] = _hosting_node_link($node->release->nid, $release);
    $row[] = _hosting_node_link($node->web_server);
    $row[] = hosting_format_interval($node->verified);
    $rows[] = array('data' => $row, 'class' => _hosting_platform_list_class($node));
  }


  return theme('table',  $header, $rows, array('class' => 'hosting-table'));
}


