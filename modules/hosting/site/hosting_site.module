<?php

define('HOSTING_SITE_DELETED', -2);
define('HOSTING_SITE_DISABLED', -1);
define('HOSTING_SITE_QUEUED', 0);
define('HOSTING_SITE_ENABLED', 1);

//Conditonally include site quotas
if (module_exists('hosting_quota')) {
  include_once('hosting_site.quota.inc');
}

/**
 * Implementation of hook_node_info
 */
function hosting_site_node_info() {
  $types["site"] =  array(
    "type" => 'site', "name" => 'Site',
    "module" => 'hosting_site',
    "has_title" => TRUE, "title_label" => 'Domain name', 
    "description" => hosting_node_help("site"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  return $types;
}


/**
 * Implementation of hook_hosting_tasks
 */
function hosting_site_hosting_tasks() {
  $tasks = array();

  $tasks['site']['backup'] = array(
    'title' => t('Backup'),
    'description' => t('Generate a backup of this site that can be restored to at any time'),
   );

  $tasks['site']['restore'] = array(
    'title' => t('Restore'),
    'description' => t('Restore this site to a previous backup. A new backup will be created before this is attempted.'),
  );

  $tasks['site']['verify'] = array(
    'title' => t('Verify'),
    'description' => t('Confirm that the site has been correctly installed and regenerate all configuration files to match the hosting front end.'),
  );

  $tasks['site']['disable'] = array(
    'title' =>  t('Disable'),
    'description' =>  t('Disabling this site will stop it from being accessible.
         It can be enabled again later.'),     
  );     
  $tasks['site']['enable'] = array(
    'title' => t('Enable'),
    'description' => t('Enabling this site will allow it to be accesible again.
         It may be disabled again if needed.'),
  );
  $tasks['site']['delete'] = array(
    'title' => t('Delete'),
    'description' => t('Deleting this site will completely remove it from the hosting system,
        but will keep the last backup available. This process can not be undone.
        Are you really sure you want to delete this site?'),
  );

  $tasks['site']['login_reset'] = array(
     'title' => t('Reset password'),
     'description' => t('Generate a one-time login reset url for this site.'),
  );


  $tasks['site']['install'] = array(
    'title' => t('Install'), 
    'description' => t('Install a site'), 
    'hidden' => TRUE 
  );

  $tasks['site']['import'] = array(
    'title' => t('Import'), 
    'description' => t('Import an existing site into Aegir'), 
    'hidden' => TRUE
  );


  return $tasks;
}


/**
 * Implementation of hook_perm
 */
function hosting_site_perm() {
  return array('create site', 'view site', 'edit site', 'delete site', 'administer site');
}

/**
 * Implementation of hook_access
 */
function hosting_site_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create site', $account);
      break;
    case 'update':
      return user_access('edit site', $account);
      break;
    case 'delete':
      return user_access('delete site', $account);
      break;
    default:
      break;
  }
}

/**
 * Return a count of enabled sites.
 *
 * This is used by cron and statistics to batch the number of sites that are processed with each call
 */
function hosting_site_count($platform = null) {
  $query = "SELECT count(nid) FROM {hosting_site} WHERE status = %d";
  $args = array(HOSTING_SITE_ENABLED);
  if (!is_null($platform)) {
    $query .= " AND platform = %d";
    $args[] = $platform;
  }
  return db_result(db_query($query, $args));
}

/**
 * Retrieve sites on a specific platform, with a specific status
 */
function hosting_get_sites_by_status($platform, $status) {
  $nodes = array();
  $result = db_query("SELECT nid FROM {hosting_site} WHERE platform=%d AND status = %d", $platform, $status);
  while ($nid = db_fetch_object($result)) {
    $nodes[$nid->nid] = node_load($nid->nid);
  }

  return $nodes;
}

/**
 * Retrieve a node based on the url
 */
function hosting_get_site_by_url($url) {
  $nid = db_result(db_query("SELECT n.nid FROM {node} n JOIN {hosting_site} h ON n.nid = h.nid WHERE n.title='%s' AND n.type = 'site' AND NOT (h.status=%d)", $url, HOSTING_SITE_DELETED));
  if ($nid) {
    return node_load($nid);
  }
  return false;
}

/**
 * Helper function to generate new site node during import
 */
function hosting_import_site($site_id, $data, $platform = HOSTING_DEFAULT_PLATFORM) {
  global $user;
  $client = node_load(HOSTING_DEFAULT_CLIENT);

  if ($data['client_email']) {
    $client = hosting_import_client($data['client_email'], $data['client_name'], $data['client_organization']);
  }

  $site = new stdClass();
  $site->nid = $site_id;
  $site->uid = $client->uid;
  $site->status = 1;
  $site->site_status = 1;
  $site->platform = $platform;
  $site->no_verify = TRUE;
  $site->verified = mktime();
  $site->client = $client->nid;
  $site->aliases = ($data['aliases']) ? $data['aliases'] : array();
  $db_server = hosting_get_db_server($data['db_id']);
  $site->db_server = ($db_server) ? $db_server->nid : HOSTING_DEFAULT_DB_SERVER;
  $site->site_language = $data['language'] ? $data['language'] : 'en';

  // Drupal 6 introduced a language field on nodes
  unset($data['language']);

  // This should really be handled via a hook system, to allow hosting_alias to see these fields, but later.
  #$site->aliases = $data['aliases'] ? $data['aliases'] : array();

  $profile = hosting_package_instance_load(array(
    'rid' => $platform,
    'short_name' => $data['profile']
  ));
  if (!$profile) {
    $profile = hosting_package_instance_load(array(
       'rid' => $platform,
       'short_name' => 'default'));
  }
  $site->profile = $profile->package_id;

  // cast site object to array, will be using various array_* functions on the data.
  $site = (array) $site;

  // Protect the fields already in the site object.
  foreach (array_keys($site) as $key) {
    unset($data[$key]);
  }

  // Load all the original node fields.
  $site = array_merge( (array) node_load($site_id), $site);

  // Map the imported fields onto the node object.
  $site = array_merge($site, $data);

  // Cast back to object.
  $site = (object) $site;
  node_save($site);
}

/**
 * pre_render form callback
 *
 * Add the needed .js and .css files to render the form correctly before printing it
 */
function _hosting_site_form_pre_render($elements) {
  #drupal_add_js(drupal_get_path('module', 'hosting_site') . '/hosting_site_form.js');
  #drupal_add_css(drupal_get_path('module', 'hosting_site') . '/hosting_site_form.css');
  return $elements;
}

include_once('hosting_site.form.inc');

/**
 * Implementation of hook_form
 *
 * TODO: additional nested logic. Certain profiles are available only on certain platforms, and certain languages on certain profiles.
 */
function hosting_site_form($node) {
  $form['#pre_render'][] = '_hosting_site_form_pre_render';

  $type = node_get_types('type', $node);

  if ($node->nid) {
    $form['info']['#prefix'] = '<div class="clear-block" id="hosting-site-edit-info">';
    $form['info']['#suffix'] = '<br /></div>';
  }

  _hosting_site_form_element($form, $node, 'title', array(
      '#type' => 'textfield',
      '#title' => t('Domain name'),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    ));

  $editable = ((!$node->client || $node->nid) || user_access('administer site')) && hosting_feature('client');
  _hosting_site_form_element($form, $node, 'client', array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Client'),
    '#default_value' => _hosting_client_site_default($node),
    '#description' => t('The client who this site belongs to.'),
    '#autocomplete_path' => 'hosting_client/autocomplete/client',
  ), 'filter_xss', $editable);


 // TODO : move this someplace more appropriate 
  $platforms = _hosting_get_platforms();
  $user = user_load($GLOBALS['user']->uid);
  if (sizeof($platforms)) {
    foreach ($platforms as $nid => $title) {
      $platform = node_load($nid);

      if ($platform->platform_status != HOSTING_PLATFORM_LOCKED) {
        if (!isset($platform->clients) || sizeof(array_intersect(array_keys($user->client_id), $platform->clients)) || $user->uid == 1) {
          $options[$nid] = $title;
        }
      }
    }
  }

  if (sizeof($options) > 0) {
    _hosting_site_form_element($form, $node, 'platform', array(
       '#type' => 'radios',
       '#title' => t('Platform'),
       '#required' => TRUE,
       '#description' => t('The platform you want the site to be hosted on.'),
       '#options' => $options,
       '#default_value' => ($node->platform) ? $node->platform : HOSTING_DEFAULT_PLATFORM,
     ), '_hosting_node_link');
  }
  else {
    drupal_set_message(t('You have no enabled platforms! Please add or unlock a platform before attempting to create a site.'), 'error');
  }

  // Install profiles 
  $profiles = hosting_get_profiles();
  foreach($profiles as $id => $name) {
    // Don't allow a site to be provisioned with hostslave or hostmaster profile
    if (in_array($name, array('hostslave', 'hostmaster'))) {
      unset($profiles[$id]);
    }
  }
  reset($profiles);

  _hosting_site_form_element($form, $node, 'profile', array(
      '#type' => 'radios',
      '#title' => t('Install profile'),
      '#description' => t('The type of site to install.'),
      '#options' => $profiles,
      '#default_value' => $node->profile ? $node->profile : key($profiles),
      '#required' => TRUE,
      '#attributes' => array('class' => "hosting-site-form-profile-options"),
    ), '_hosting_node_link');

  _hosting_site_form_element($form, $node, 'site_language', array(
      '#type' => 'radios',
      '#title' => t('Language'),
      '#description' => t('The type of site to install.'),
      '#options' => hosting_get_profile_languages(),
      '#required' => TRUE,
      '#default_value' => $node->site_language ? $node->site_language : 'en',
      '#attributes' => array('class' => "hosting-site-form-site-language-options"),
    ), '_hosting_language_name');


  _hosting_site_form_element($form, $node, 'db_server', array(
        '#type' => 'radios',
        '#title' => t('Database server'),
        '#required' => TRUE,
        '#description' => t('The database server the site will use to host it\'s content.'),
        '#options' => hosting_get_servers('db'),
        '#default_value' => $node->db_server,
      ), '_hosting_node_link');

  foreach(array('verified', 'last_cron', 'site_status') as $extra_attribute) {
    $form["$extra_attribute"] = array('#type' => 'value', '#value' => $node->$extra_attribute);
  }

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function hosting_site_validate($node, &$form) {
  global $user;
  $url = strtolower(trim($node->title)); // domain names are case-insensitive
  if (!_hosting_valid_fqdn($url)) {
    form_set_error('title', t("You have not specified a valid url for this site."));
  }
   
  if (!$node->new_client) {
    $client = hosting_get_client($node->client);
    if (!$node->client || !$client) {
      form_set_error('client', t('Please fill in a valid client'));
    }
    if (!user_access('administer clients') && !array_key_exists($client->nid, hosting_get_client_from_user($user->uid))) {
      form_set_error('client', t('Access denied to client @client', array('@client' => $client->title)));
    }
    $node->client = $client->nid;
  }
  # TODO: maybe we should allow creation of sites that conflict with HOSTING_SITE_DISABLED (which would then need to be renamed before being re-enabled)
  if (!hosting_domain_allowed($url, (array) $node)) {
    form_set_error('title', t("The domain name you have specified is already in use."));
  }

  if (!array_key_exists($node->profile, hosting_get_profiles($node->platform))) {
    form_set_error('profile', t('Please fill in a valid profile'));
  }

  // Check that we are selecting a valid language for this profile, but only when a new site is created. 
  if (!array_key_exists($node->site_language, hosting_get_profile_languages($node->profile, $node->platform)) && !$node->nid) {
    form_set_error('site_language', t('Please fill in a valid language'));
  }

}

/**
 * Implementation of hook_nodeapi().
 */
function hosting_site_nodeapi(&$node, $op, $teaser, $page) {
  switch($op) {
    case 'presave':
      $node->title = strtolower(trim($node->title)); // domain names are case-insensitive
      break;
  }
}

/**
 * Implementation of hook_insert().
 */
function hosting_site_insert(&$node) {
  $client = hosting_get_client($node->client);
  $node->client = $client->nid;
  $node->site_language = ($node->site_language) ? $node->site_language : 'en';

  db_query("INSERT INTO {hosting_site} (vid, nid, client, db_server, platform, profile, language, last_cron, status, verified, `ssl`, ssl_redirect) VALUES (%d, %d, %d, %d, %d, %d, '%s', %d, %d, %d, %d, %d)",
           $node->vid, $node->nid, $node->client, $node->db_server, $node->platform, $node->profile, $node->site_language, $node->last_cron, $node->site_status, $node->verified, $node->ssl, $node->ssl_redirect);
  if ((!$node->old_vid)) {
    hosting_context_register($node->nid, ($node->hosting_name) ? $node->hosting_name : $node->title);
    if ($node->import) {
      hosting_add_task($node->nid, 'import');
    }
    else {
      hosting_add_task($node->nid, 'install');
    }
  }
}

/**
 * Implementation of hook_update().
 */
function hosting_site_update(&$node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_site_insert($node);
  }
  else {
    $client = hosting_get_client($node->client);
    $node->client = $client->nid;
    if ($node->site_status == HOSTING_SITE_DELETED) {
      $node->no_verify = TRUE;
    }
    db_query("UPDATE {hosting_site} SET client = %d, db_server = %d, platform = %d, last_cron = %d, status = %d, profile = %d, language = '%s', verified = %d, `ssl` = %d, ssl_redirect = %d WHERE vid=%d",
             $node->client, $node->db_server, $node->platform, $node->last_cron, $node->site_status, $node->profile, $node->site_language, $node->verified, $node->ssl, $node->ssl_redirect, $node->vid);
  }
  if (!$node->no_verify) {
    hosting_add_task($node->nid, 'verify');
  }
}

/**
 * Implementation of hook_load().
 *
 * @param node
 *    Node object
 */
function hosting_site_load($node) {
  $additions = db_fetch_object(db_query('SELECT  client, db_server, platform, profile, language as site_language, last_cron, status AS site_status, verified, `ssl`, ssl_redirect FROM {hosting_site} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_load().
 *
 * @param arg
 *    Node's numeric nid
 */
function hosting_site_node_load($arg) {
 if (!is_numeric($arg)) {
    return FALSE;
  }
  if ($node = node_load($arg)) {
    if ($node->type == 'site') {
      return $node;
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_nodeapi_delete_revision().
 */
function hosting_nodeapi_site_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_site} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_site_delete($node) {
  db_query('DELETE FROM {hosting_site} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {hosting_package_instance} WHERE rid=%d', $node->nid);
  hosting_context_delete($node->nid);
  $result = db_query("SELECT distinct nid FROM {hosting_task} WHERE rid=%d", $node->nid);
  while ($nid = db_fetch_object($result)) {
    node_delete($nid->nid);
  }
}

/**
 * Implementation of hook_view().
 */
function hosting_site_view(&$node, $teaser = false) {
  hosting_set_breadcrumb($node);
  modalframe_parent_js();
  $node->content['info']['#prefix'] = '<div id="hosting-site-info">';
  if ($node->site_status == HOSTING_SITE_ENABLED) {
    $node->content['info']['link'] = array(
      '#value' => _hosting_site_goto_link($node),
      '#weight' => -10
    );
  }

  if (is_numeric($node->client)) {
    $node->content['info']['client'] = array(
      '#type' => 'item',
      '#title' => t('Client'),
      '#value' => _hosting_node_link($node->client),
      '#weight' => 5
    );
  }

  $node->content['info']['verified'] = array(
    '#type' => 'item',
    '#title' => t('Verified'),
    '#value' => hosting_format_interval($node->verified),
  );
  
  $node->content['info']['platform'] = array(
    '#type' => 'item',
    '#title' => t('Platform'),
    '#value' => _hosting_node_link($node->platform),
  );

  if ($node->profile) {
    $node->content['info']['profile'] = array(
      '#type' => 'item',
      '#title' => t('Install profile'),
      '#value' => _hosting_node_link($node->profile),
    );
  }
  if ($node->site_language) {
    $node->content['info']['site_language'] = array(
      '#type' => 'item',
      '#title' => t('Language'),
      '#value' => _hosting_language_name($node->site_language),
    );
  }
  if ($node->db_server) {
    $node->content['info']['db_server'] = array(
      '#type' => 'item',
      '#title' => t('Database server'),
      '#value' => _hosting_node_link($node->db_server),
    );
  }

  if ($node->nid) { 
    $node->content['info']['status'] = array(
      '#type' => 'item',
      '#title' => t('Status'),
      '#value' => _hosting_site_status($node),
    );
  }

  $node->content['info']['#suffix'] = '</div>';

  if ($node->nid) { 
    $node->content['tasks_view'] = array(
      '#type' => 'item',
      '#value' => hosting_task_table($node),
      '#prefix' => '<div id="hosting-task-list">',
      '#suffix' => '</div>', 
      '#weight' => 10
    );
    $settings['hostingTaskRefresh'] = array(
      'nid' => $node->nid,
      'changed' => $node->changed,
    );
    drupal_add_js($settings, 'setting');

    drupal_add_js(drupal_get_path('module','hosting_task') . '/hosting_task.js');
  }
  return $node;
}

/**
 * Define the status types of a site
 */
function _hosting_site_status($node) {
  static $labels = array(
    HOSTING_SITE_QUEUED => "Queued",
    HOSTING_SITE_ENABLED => "Enabled",
    HOSTING_SITE_DELETED => "Deleted",
    HOSTING_SITE_DISABLED => "Disabled",
  );
  return $labels[$node->site_status];
}

/**
 * Add a site backup record.
 *
 * Builds a list of backups of the site that have been generated.
 */
function hosting_site_add_backup($site, $web_server, $filename, $description = '') {
  db_query("INSERT INTO {hosting_site_backups} (site, web_server, filename, description, timestamp) VALUES (%d, %d, '%s', '%s', %d)",
    $site, $web_server, $filename, $description, mktime());
  $bid = db_last_insert_id('hosting_site_backups', 'bid');
  return $bid;
}

/**
 * Delete a site backup record
 */
function hosting_site_delete_backup($bid) {
  db_query("DELETE FROM {hosting_site_backups} WHERE bid=%d", $bid);
}

/**
 * Get a site backup record
 */
function hosting_site_get_backup($bid) {
  return db_fetch_array(db_query("SELECT bid, site, web_server, filename, description, timestamp FROM {hosting_site_backups} WHERE bid = %d", $bid));
}

/**
 * Retrieve a list of backup generated for a site.
 *
 * @param site
 *   The node if of the site backups are being retrieved for
 * @return
 *   An associative array of backups existing for the site, indexed by bid and sorted reverse chronologically.
 */
function hosting_site_backup_list($site) {
  $result = db_query("SELECT bid, description, timestamp FROM {hosting_site_backups} WHERE site=%d ORDER BY timestamp DESC", $site);
  while ($object = db_fetch_object($result)) {
    #needs to be cleaned up. but i am NOT generating a theme func for this right now.
    $backups[$object->bid] = '<strong>' . format_date($object->timestamp) . '</strong> - ' . filter_xss($object->description);
  }
  return $backups;
}


/**
 * Implementation of hook_form_alter().
 * Hide the delete button on site nodes
 */
function hosting_site_form_alter(&$form, &$form_state, $form_id) {
  // Remove delete button from site edit form, unless the site's already been deleted via the Delete task
  if ($form_id == 'site_node_form') {
    $node = $form['#node'];
    if ($node->site_status !== '-2') {
      $form['buttons']['delete']['#type'] = 'hidden';
    }
  }
}

/**
 * Check if a site exists in a somehow wrong way
 *
 * @see hosting_domain_allowed()
 * @deprecated
 */
function hosting_site_exists($url, $nid = null) {
  return !hosting_domain_allowed($url, array('nid' => $nid));
}

/**
 * Implementation of hook_allow_domain().
 *
 * @see hosting_domain_allowed()
 */
function hosting_site_allow_domain($url, $params = array()) {
  $query = "SELECT COUNT(n.nid) FROM {node} n 
    JOIN {hosting_site} h ON n.nid = h.nid
    WHERE type='site' AND title='%s' AND h.status <> %d ";
  $args[] = $url;
  $args[] = HOSTING_SITE_DELETED;
  
  if (isset($params['client'])) {
    $query .= ' AND h.client <> %d';
    $args[] = $params['client'];

    // If quotas is enabled, check to see if we are exceeding quotas
    if (function_exists('hosting_site_hosting_quota_get_usage')) {
      $client = node_load($params['client']);
      $usage = hosting_site_hosting_quota_get_usage($params['client'], 'sites');
      $limit = $client->quota['sites']['limit'];

      if ($usage > $limit || empty($client->quota['sites']['#value'])) {
        drupal_set_message(t('@client has reached their site quota of @sites. No new sites can be added unless an existing site is deleted or the site quota is increased.', array('@client' => $client->title, '@sites' => $limit)), 'error');   
        return FALSE;
      }
    }
  }

  if (isset($params['nid'])) {
    $query .= ' AND n.nid <> %d';
    $args[] = $params['nid'];
  }
  $result = !db_result(db_query($query, $args));
  return $result;
}

function hosting_site_task_status($nid) {
  return hosting_task_status_output('nid', $nid, 'install');
}


function hosting_task_backup_form($node) {
  $form['description'] = array (
    '#title' => t('Description'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#weight' => '-1',
    '#description' => "Describe the reasons for creating this backup."
  );  

  return $form;
}


/**
 * Display a list of created sites on the front page
 * @TODO Add ability to filter by additional fields
 * @TODO Add paging.
 */
function hosting_site_list($filter_by = null, $filter_value = null) {
  $args[] = 'site';
  $cond = '';

  if ($filter_by && $filter_value) {
    if ($filter_by == 'status') {
      $cond = ' AND s.' . $filter_by . ' & %d';
    } else {
      $cond = ' AND s.' . $filter_by . ' = %d';
    }
    $args[] = $filter_value;
  }

  $header = array(
    array('data' => t('Site'), 'field' => 'title'),
    array('data' => t('Profile'), 'field' => 'profile'),
    array('data' => t('Language'), 'field' => 'site_language'),
    array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc'),
  );
  $platforms = _hosting_get_enabled_platforms();
  if (sizeof($platforms) > 1) {
    $header[] = array('data' => t('Platform'), 'field' => 'platform');
  }

  $sql = "SELECT n.nid, n.title, n.created, s.status as site_status, profile, s.language as site_language, platform, verified FROM {node} n left join {hosting_site} s ON n.vid=s.vid WHERE type='%s' AND s.status != -2 " . $cond;
  $sql .= tablesort_sql($header);

  // @TODO hide deleted sites
  $result = pager_query(db_rewrite_sql($sql), 25, 1, null, $args);

  if (!$result) {
    return null;
  }
  $rows = array();
  while ($node = db_fetch_object($result)) {
    $row = array();
    $row[] =  array('data' => l($node->title, 'node/' . $node->nid), 'class'=> 'hosting-status');
    $row[] = ($node->profile) ? _hosting_node_link($node->profile) : t('n/a');
    $row[] = ($node->site_language) ? _hosting_language_name($node->site_language) : t('n/a');
    $row[] = t("@interval ago", array('@interval' => format_interval(mktime() - $node->created, 1)));
    if (sizeof($platforms) > 1) {
      $row[] = ($node->platform) ? _hosting_node_link($node->platform) : t('n/a');
    }
    $rows[] = array('data' => $row, 'class' => _hosting_site_list_class($node));
  }
  
  return theme('table',  $header, $rows, array('class' => 'hosting-table')) . theme('pager', null, 25, 1);
}

/**
 * Define the classes that correspond to the site status.
 * @see _hosting_site_status()
 */
function _hosting_site_list_class($node) {
  static $classes = array(
    HOSTING_SITE_QUEUED => "hosting-queue",
    HOSTING_SITE_ENABLED => "hosting-success",
    HOSTING_SITE_DELETED => "hosting-error",
    HOSTING_SITE_DISABLED => "hosting-error",
  );
  if (($node->site_status == HOSTING_SITE_ENABLED) && (!$node->verified)) {
    return 'hosting-warning';
  }

  return $classes[$node->site_status];
}

/**
 * Page handler for displaying list of hosted sites on front page
 */
function hosting_sites() {
  if ($list = hosting_site_list()) {
    return $list;
  }
  $create_site_link = l(t('Create a site now?'), 'node/add/site');
  return t("No sites have been created yet. !link", array(
    '!link' => $create_site_link));
}

/**
 * Implementation of hook_menu()
 */
function hosting_site_menu() {
  $items = array();

  $items['hosting/sites'] = array(
    'title' => 'Sites',
    'description' => 'Display a list of sites',
    'page callback' => 'hosting_sites',
    'access arguments' => array('create site') 
  );

  $items['hosting/hosting_site_form_populate'] = array(
    'page callback' =>'_hosting_site_form_populate',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['node/%hosting_site_node/goto_site'] = array(
    'page callback' => 'hosting_site_goto',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Populate hosting site node form element with specified arguments
 */
function _hosting_site_form_populate($element, $value, $value2 = null) {
  $element = str_replace('-', '_', $element);
  $form[$element] = call_user_func('_hosting_site_form_'. $element, $value, $value2);

  $GLOBALS['devel_shutdown'] = FALSE;
  $form_state = array();
  $built = form_builder('hosting_site_form', $form, $form_state);
  drupal_json(
    array(
      'status' => 'TRUE',
      'type' => $form[$element]['#type'],
      'data' => drupal_render($built),
    )
  );
  exit();
}

/**
 * Generate a link allowing the user to log into their new site, or simply
 * go to the site front page if the link has expired.
 */
function _hosting_site_goto_link($node) {
  $cache = cache_get("hosting:site:" . $node->nid . ":login_link");
  if (!is_null($cache) && (mktime() < $cache->data['expire'])) {
    $title = t("Log in to !url" , array('!url' => $node->title));
  }
  else {
    $title = t("Go to !url" , array('!url' => $node->title));
  }
  $options['attributes']['class'] = 'hosting-goto-site-link';
  return l($title, "node/" . $node->nid . "/goto_site", $options); 
}

/**
 * Menu callback to go to your site.
 *
 * This needs to be a callback because the link is only going to work once, 
 * so this will remove the link from the cache and just redirect to the site
 * not the login page.
 */
function hosting_site_goto($node) {
  $cid = "hosting:site:" . $node->nid . ":login_link";
  $cache = cache_get($cid);
  if (!is_null($cache) && (mktime() < $cache->data['expire'])) {
    $theurl = $cache->data['link'];
    cache_clear_all($cid, 'cache');
  }
  else {
    $port = hosting_site_get_port($node);


    switch($node->port) {
      case 0 :
      case 80:
        $theurl = 'http://' . $node->title;
      break;
      case 443:
        $theurl = 'https://' . $node->title;
      break;
      default:
       $theurl = 'http://' . $node->title . ':' . $port;
    }
  }

  drupal_goto($theurl);
  exit();
}

/**
 * Retrieve the port the site will be available on, so we can redirect.
 */
function hosting_site_get_port($node) {
  $platform = node_load($node->platform);
  $server = node_load($platform->web_server);
  return $server->services['http']->port;
}

/**
 * Views integration
 */
function hosting_site_views_api() {
  return array(
    'api' => 2, 
    'path' => drupal_get_path('module', 'hosting_site'),
  );
}
