<?php
/**
 * @file Hosting module
 *
 * Contains just about all the interface magic of hostmaster.
 */
 

/**
 * Not split for performance reasons. Just to keep code together.
 */

#Node type includes
include_once('node_types/hosting_action.inc');
include_once('node_types/hosting_client.inc');
include_once('node_types/hosting_db_server.inc');
include_once('node_types/hosting_platform.inc');
include_once('node_types/hosting_site.inc');
include_once('node_types/hosting_web_server.inc');


include_once('hosting_help.inc');
include_once('hosting_views.inc');


function hosting_node_info() {
  #content
  $types["client"] =  array(
    "type" => 'client', "name" => 'Client',
    "module" => 'hosting_client',
    "has_title" => TRUE, "title_label" => 'Client', 
    "description" => hosting_node_help("client"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  $types["site"] =  array(
    "type" => 'site', "name" => 'Site',
    "module" => 'hosting_site',
    "has_title" => TRUE, "title_label" => 'Domain name', 
    "description" => hosting_node_help("site"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);

  #management
  $types["action"] =  array(
    "type" => 'action', "name" => 'Action',
    "module" => 'hosting_action',
    "has_title" => FALSE, "title_label" => '', 
    "description" => hosting_node_help("action"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  
  #configuration
  $types["platform"] =  array(
    "type" => 'platform', "name" => 'Platform',
    "module" => 'hosting_platform',
    "has_title" => TRUE, "title_label" => 'Platform', 
    "description" => hosting_node_help("platform"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    
  $types["web_server"] =  array(
    "type" => 'web_server', "name" => 'Web server',
    "module" => 'hosting_web_server',
    "has_title" => true, "title_label" => t('Host name'), 
    "description" => hosting_node_help("web_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  $types["db_server"] =  array(
    "type" => 'db_server', "name" => 'Database server',
    "module" => 'hosting_db_server',
    "has_title" => TRUE, "title_label" => t('Host name'), 
    "description" => hosting_node_help("db_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    
  return $types;
}


/**
 * Implementation of hook_nodeapi
 *
 * This function redirects to hosting_nodeapi_$nodetype_$op calls, to save ourselves
 * from an incessant amount of intricately nested code, and allow easier extension / maintenance.
 */
function hosting_nodeapi(&$node, $op, $teaser) {
  $func = "hosting_nodeapi_" . $node->type . "_" . str_replace(" ", "_", $op);
  if (function_exists($func)) {
    $func($node, $op, $teaser);
  }
  # Keep own provisioning system up to date.
  if ($op == 'update') {
#    hosting_configure_hosting($node);
  }
}

/**
 * Implementation of hook_menu().
 */
function hosting_menu($may_cache) {
  $items = array();

  if (!$may_cache) {
    if ( arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'platform') {
        $items[] = array(
          'path' => 'node/' . arg(1) . '/configs',
          'title' => t('Configuration files'),
          'description' => t('The configuration files for this platform'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('hosting_config_templates', $node),
          'access' => user_access('administer provisioning'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 10
        );
      }
      if (in_array($node->type, array('platform', 'site'))) {
        $action = new stdClass();
        $action->type = "action";
        $items[] = array(
          'path' => 'node/' . arg(1) . '/add_action',
          'title' => t('Actions'),
          'description' => t('Request that the hosting system runs a command on this %type.', array("%type" => $node->type)),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('action_node_form', $action, $node->nid),
          'access' => user_access('create action nodes'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 9
        );
        
      }
    }
  }
  return $items;
}



/**
 * Page callback
 * Configure the templates used to generate config files for the framework.
 */
function hosting_config_templates($node) {
  $result = db_query("SELECT * FROM {config_template} WHERE vid=%d AND type='drupal_settings' limit 1", $node->vid);

  if (db_num_rows($result)) {
    $drupal_settings = db_fetch_array($result);
  }
  else {
    $drupal_settings = array(
      'template' => variable_get('provision_drupal_settings_template', _provision_drupal_default_template()),
      'status' => 0
    );
  }

  $form['#tree'] = true;
  $form['drupal_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal configuration files'),
    '#description' => t('These settings control the generation of the Drupal settings.php file for this host.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['drupal_settings']['template'] = array(
    '#type' => 'textarea',
    '#title' => t('Drupal settings file template'),
    '#description' => t('The text you enter here will be used by the Provisioning framework to generate your Drupal settings.php file. This field contains php, and should start with &lt;?php.'),
    '#default_value' => $drupal_settings['template'],
    '#cols' => 60,
    '#rows' => 5,
  );
  $form['drupal_settings']['status'] = array(
    '#type' => 'checkbox',
    '#default_value' => $drupal_settings['status'],
    '#title' => t('Use this configuration file for this platform.'),
  );
  
  $result = db_query("SELECT * FROM {config_template} WHERE vid=%d AND type='apache_vhost' limit 1", $node->vid);
  if (db_num_rows($result)) {
    $apache_vhost = db_fetch_array($result);
  }
  else {
    $apache_vhost = array(
      'template' => variable_get('provision_apache_vhost_template', _provision_apache_default_template()),
      'status' => 0
    );
  }

  $form['#tree'] = true;
  $form['apache_vhost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apache Virtual Host configuration files'),
    '#description' => t('These settings control the generation of the Virtual Host directives for this platform.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['apache_vhost']['template'] = array(
    '#type' => 'textarea',
    '#title' => t('Drupal settings file template'),
    '#description' => t('The text you enter here will be used by the Provisioning framework to generate your Apache Virtual Host file. This field contains php, and should start with &lt;?php.'),
    '#default_value' => $apache_vhost['template'],
    '#cols' => 60,
    '#rows' => 5,
  );
  $form['apache_vhost']['status'] = array(
    '#type' => 'checkbox',
    '#default_value' => $apache_vhost['status'],
    '#title' => t('Use this configuration file for this platform.'),
  );
  return $form;
}

function hosting_drush_command() {
  $items['hosting process'] = array(
    'callback' => 'hosting_process_queue',
    'description' => 'Process the queue of outstanding hosting actions.'
  );

    $items['hosting import platform'] = array(
    'callback' => 'hosting_import_platform',
    'description' => 'Generate a platform node for an already installed platform.'
  );

  $items['hosting import site'] = array(
    'callback' => 'hosting_import_site',
    'description' => 'Generate a site node for an already installed site.'
  );
  
  return $items;
}

function hosting_process_queue() {
  global $provision_errors;
  
  $count = drush_get_option(array('i', 'items', 5)); # process a default of 5 items at a time.
  $sqid = variable_get('hosting_action_subqueue', 1);
  $actions = nodequeue_nodes($sqid, false, 0, $count);

  foreach ($actions as $action) {
    // create a new revision
    $action->changed = mktime();
    $action->executed =  mktime();
    $action->revision = true;
    node_save($action);

    hosting_action_log($action->vid, "queue", t("Action starts processing"));
    $data = hosting_map_values($action);
    $cmd = _hosting_provision_command($data);
    
    hosting_action_log($action->vid, 'command', "Executing: $cmd");
    exec(escapeshellcmd($cmd), $return, $code);

    $data = unserialize(trim(implode("\n", $return)));
    if (!is_array($data)) {
      hosting_action_log($action->vid, 'error', t("The command could not be executed succesfully."));
      $code = PROVISION_FRAMEWORK_ERROR;
    }
    foreach ((array) $data['log'] as $log) {
      hosting_action_log($action->vid, $log['type'], $log['message'], $log['severity'], $log['timestamp']);
    }
    
    # Drupal message errors.
    foreach ((array) $data['messages']['error'] as $error) {
      if (preg_match("/^warning:/", $error)) {
        hosting_action_log($action->vid, "warning", ereg_replace("/^warning: /", '', $error), 0, $log['timestamp']);  
      }
      elseif (preg_match("/^user warning:/", $error)) {
        hosting_action_log($action->vid, "warning", ereg_replace("/^user warning: /", '', $error), 0, $log['timestamp']);  
      }

    }

    if (!$code) {
      // remove from queue
      $subqueue = _hosting_get_subqueue();
      hosting_action_log($action->vid, "queue", t("Removing action from hosting queue"), 0);
      nodequeue_subqueue_remove_node($subqueue->sqid, $action->nid);
      
      // mark as succesful
      $action->action_status = PROVISION_SUCCESS;
      $action->revision = 0;
      node_save($action);
    }
    else {
      $action->action_status = $code;
      $action->revision = 0;
      node_save($action);
    }
  }
}

function _hosting_provision_command($data) {
  foreach ($data as $key => $value) {
    if (preg_match("/^site_/", $key) && $key != 'site_url') {
      $option_str .= " --$key=$value";
    }
    if (preg_match("/^site-/", $key)) {
      $option_str .= " --" . str_replace("-", "_", $key) . "=$value";
    }
  }
  $command = sprintf("%s/drush.php provision %s %s -b %s", $data['publish_path'] . '/' . drupal_get_path("module", "drush"), $data['action_type'], $data['site_url'], $option_str);
  return $command;
}

function hosting_form_alter($form_id, &$form) {
  if ($step = hosting_wizard_current_step()) {
    if ($step['form_id'] == $form_id) {
      $form['#submit']['hosting_wizard_continue_submit'] = array();
    }
  }
  if ($form_id == 'site_node_form') {
    $form['title']['#validate']['hosting_validate_site_title'] = array($form['nid']['#value']);
  }
  if ($form_id == 'user_register') {
    $form['destination'] = array('#type' => 'hidden', '#value' => 'node/1');
    if ($_GET['q'] != 'user/register') {
      $form['notify'] = array('#type' => 'hidden', '#value' => false);
      $form['status'] = array('#type' => 'hidden', '#value' => 1);
      $form['pass'] = array('#type' => 'value', '#value' => user_password());
    }
  }
  if ($form_id == 'provision_configure') {
#    $form['#submit']['hosting_configure_provision'] = array();
  }
}

/**
 * Progress to the next part of the installation wizard
 */
function hosting_wizard_continue_submit() {
  if ($step = hosting_wizard_current_step(TRUE)) {
    if ($step) {
      #redirect to next page
      return $step['path'];      
    }
    else {
      return variable_get('site_frontpage', 'node');      
    }

  }
}

/**
 * Return information about the current step of the installation wizard
 */
function hosting_wizard_current_step($next = false) {
  if (variable_get('hosting_wizard_completed', false)) {
    return false;
  }
  $steps = hosting_wizard_steps();
  
  // set step, initializaing to first element of #steps
  $step = variable_get('hosting_wizard_current_step', $steps['#steps'][0]);
  if ($step == $steps['#steps'][sizeof($steps['#steps']) - 1] && $next) {
    variable_set('hosting_wizard_completed', true);
    variable_del('hosting_wizard_current_step');
    return false;
  }
  if ($next) {
    $key = array_search($step, $steps['#steps']);
    variable_set('hosting_wizard_current_step', $steps['#steps'][$key + 1]);
  }

  return $steps[$step];
}

function hosting_init() {
  if ($step = hosting_wizard_current_step()) {
    if ($_GET['skip_wizard']) {
      variable_set('hosting_wizard_completed', TRUE);
    }
    elseif ($step['path'] != $_GET['q']) {
      #todo: check for the help paths
      drupal_goto($step['path']);
    }
  }
}

function hosting_wizard_steps() {
  return array(
    '#steps' => array('user_edit', 'provision_configure'),
    'user_edit' => array("path" => "user/1/edit", 'title' => t("Change your account password."), "form_id" => "user_edit", 
        'message' => t('An administrator account has been registered for you. 
          Please change your password to continue with the configuration process.')),
    'provision_configure' => array("path" => "admin/settings/provision", 'title' => t("Configure the provisioning framework."), "form_id" => "provision_configure",
      'message' => t('To be able to create sites using Hostmaster, we need some information about your server. Please complete this configuration form.')),
  );
}



function hosting_validate_site_title($element, $nid) {
  if (!preg_match("/^([\w-]+\.)+[a-z]{2,4}$/i", $element['#value'] ) ) {
    form_set_error('title', t("You have not specified a valid url for this site."));
  }
  if (db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type='site' AND title='%s' AND  nid <> %d", $element['#value'], $nid))) {
    form_set_error('title', t("The url you specified is not unique."));
  }
}




function hosting_configure_provision($form_id, &$values) {
  $platform = node_load(variable_get('hosting_own_platform', 4));
  $platform->revision = true;
  $platform->publish_path = $_SERVER['DOCUMENT_ROOT'];
  node_save($platform);

  $db_server = node_load(variable_get('hosting_own_db_server', 2));
  $db_server->revision = true;
  $db_server->title = $values['provision_db_host'];
  $db_server->db_user = $values['provision_db_user'];
  $db_server->db_passwd = $values['provision_db_password'];
  node_save($db_server);
  
  $web_server = node_load($platform->web_server);
  $web_server->config_path = $values['provision_config_path'];
  $web_server->backup_path = $values['provision_backup_path'];
  $web_server->revision = true;
  node_save($web_server);
  
}

function hosting_configure_hosting($node) {
  if ($node->nid == variable_get('hosting_own_' . $node->type, null)) {
    switch ($node->type) {
      case 'platform' :
        variable_set('hosting_platform_path', $node->publish_path);
        break;
      case 'db_server' :
       variable_set('provision_db_host', $node->title);
       variable_set('provision_db_user', $node->db_user);
       variable_set('provision_db_ip_address', $node->db_ip_address);
       variable_set('provision_db_password', $node->db_passwd);
        break;
      case 'db_server' :
        variable_set('provision_script_user', $node->script_user);
        variable_set('provision_web_group', $node->web_group);
        variable_set('provision_config_path', $node->config_path);
        variable_set('provision_backup_path', $node->backup_path);
        break;                  
    }
  }
}

function hosting_relation_link_handler($fieldinfo, $fielddata, $value, $data) {
  return _hosting_node_link($data->hosting_action_rid);
}


function hosting_map_values($node) {
  if (is_numeric($node)) {
    $node = node_load($node);
  }
  
  $values = array();
  
  $func = 'hosting_map_values_' . $node->type;
  if (function_exists($func)) {
    $values = $func($node);      
  }

  return $values;
}

function _hosting_node_link($nid) {
  $node = node_load($nid);
  if ($node->nid) {
    return l($node->title, "node/" . $node->nid);
  }
}

function _hosting_get_queue() {
 return nodequeue_load( variable_get('hosting_action_queue', 1));
}

function _hosting_get_subqueue() {
 return nodequeue_load_subqueue(variable_get('hosting_action_subqueue', 1));
}
