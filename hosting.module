<?php
/**
 * Hosting module
 * Contains small helper functions for hosting infrastructure. It's basically glue.
 */

include_once('hosting.inc');
include_once('hosting_help.inc');
include_once('hosting_views.inc');

/**
 * Implementation of hook_menu().
 */
function hosting_menu($may_cache) {
  $items = array();

  if (!$may_cache) {
    if ( arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'platform') {
        $items[] = array(
          'path' => 'node/' . arg(1) . '/configs',
          'title' => t('Configuration files'),
          'description' => t('The configuration files for this platform'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('hosting_config_templates', $node),
          'access' => user_access('administer provisioning'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 10
        );
      }
      if (in_array($node->type, array('platform', 'site'))) {
        $items[] = array(
          'path' => 'node/' . arg(1) . '/request',
          'title' => t('Request action'),
          'description' => t('Request that the hosting system generates an action for the framework.'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('hosting_action_request', $node),
          'type' => MENU_LOCAL_TASK,
          'weight' => 9
        );
        
      }
    }
  }
  return $items;
}

function hosting_config_templates($node) {

  
  $result = db_query("SELECT * FROM {config_template} WHERE vid=%d AND type='drupal_settings' limit 1", $node->vid);

  if (db_num_rows($result)) {
    $drupal_settings = db_fetch_array($result);
  }
  else {
    $drupal_settings = array(
      'template' => variable_get('provision_drupal_settings_template', _provision_drupal_default_template()),
      'status' => 0
    );
  }

  $form['#tree'] = true;
  $form['drupal_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal configuration files'),
    '#description' => t('These settings control the generation of the Drupal settings.php file for this host.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['drupal_settings']['template'] = array(
    '#type' => 'textarea',
    '#title' => t('Drupal settings file template'),
    '#description' => t('The text you enter here will be used by the Provisioning framework to generate your Drupal settings.php file. This field contains php, and should start with &lt;?php.'),
    '#default_value' => $drupal_settings['template'],
    '#cols' => 60,
    '#rows' => 5,
  );
  $form['drupal_settings']['status'] = array(
    '#type' => 'checkbox',
    '#default_value' => $drupal_settings['status'],
    '#title' => t('Use this configuration file for this platform.'),
  );
  
  $result = db_query("SELECT * FROM {config_template} WHERE vid=%d AND type='apache_vhost' limit 1", $node->vid);
  if (db_num_rows($result)) {
    $apache_vhost = db_fetch_array($result);
  }
  else {
    $apache_vhost = array(
      'template' => variable_get('provision_apache_vhost_template', _provision_apache_default_template()),
      'status' => 0
    );
  }

  $form['#tree'] = true;
  $form['apache_vhost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apache Virtual Host configuration files'),
    '#description' => t('These settings control the generation of the Virtual Host directives for this platform.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['apache_vhost']['template'] = array(
    '#type' => 'textarea',
    '#title' => t('Drupal settings file template'),
    '#description' => t('The text you enter here will be used by the Provisioning framework to generate your Apache Virtual Host file. This field contains php, and should start with &lt;?php.'),
    '#default_value' => $apache_vhost['template'],
    '#cols' => 60,
    '#rows' => 5,
  );
  $form['apache_vhost']['status'] = array(
    '#type' => 'checkbox',
    '#default_value' => $apache_vhost['status'],
    '#title' => t('Use this configuration file for this platform.'),
  );
  return $form;
}

function hosting_drush_command() {
  $items['hosting process'] = array(
    'callback' => 'hosting_process_queue',
    'description' => 'Process the queue of outstanding hosting actions.'
  );

    $items['hosting import platform'] = array(
    'callback' => 'hosting_import_platform',
    'description' => 'Generate a platform node for an already installed platform.'
  );

  $items['hosting import site'] = array(
    'callback' => 'hosting_import_site',
    'description' => 'Generate a site node for an already installed site.'
  );
  
  return $items;
}

function hosting_process_queue() {
  global $provision_errors;
  
  $count = drush_get_option(array('i', 'items', 5)); # process a default of 5 items at a time.
  $sqid = variable_get('hosting_action_subqueue', 1);
  $actions = nodequeue_nodes($sqid, false, 0, $count);

  foreach ($actions as $action) {
    // create a new revision
    $action->changed = mktime();
    $action->executed =  mktime();
    $action->revision = true;
    node_save($action);

    hosting_action_log($action->vid, "queue", t("Action starts processing"));
    $data = hosting_map_values($action);
    $cmd = _hosting_provision_command($data);
    
    hosting_action_log($action->vid, 'command', "Executing: $cmd");
    exec(escapeshellcmd($cmd), $return, $code);

    $data = unserialize(trim(implode("\n", $return)));
    if (!is_array($data)) {
      hosting_action_log($action->vid, 'error', t("The command could not be executed succesfully."));
      $code = PROVISION_FRAMEWORK_ERROR;
    }
    foreach ((array) $data['log'] as $log) {
      hosting_action_log($action->vid, $log['type'], $log['message'], $log['severity'], $log['timestamp']);
    }
    
    # Drupal message errors.
    foreach ((array) $data['messages']['error'] as $error) {
      if (preg_match("/^warning:/", $error)) {
        hosting_action_log($action->vid, "warning", ereg_replace("/^warning: /", '', $error), 0, $log['timestamp']);  
      }
      elseif (preg_match("/^user warning:/", $error)) {
        hosting_action_log($action->vid, "warning", ereg_replace("/^user warning: /", '', $error), 0, $log['timestamp']);  
      }

    }

    if (!$code) {
      // remove from queue
      $subqueue = _hosting_get_subqueue();
      hosting_action_log($action->vid, "queue", t("Removing action from hosting queue"), 0);
      nodequeue_subqueue_remove_node($subqueue->sqid, $action->nid);
      
      // mark as succesful
      $action->action_status = PROVISION_SUCCESS;
      $action->revision = 0;
      node_save($action);
    }
    else {
      $action->action_status = $code;
      $action->revision = 0;
      node_save($action);
    }
  }
}

function _hosting_provision_command($data) {
  foreach ($data as $key => $value) {
    if (preg_match("/^site_/", $key) && $key != 'site_url') {
      $option_str .= " --$key=$value";
    }
    if (preg_match("/^site-/", $key)) {
      $option_str .= " --" . str_replace("-", "_", $key) . "=$value";
    }
  }
  $command = sprintf("%s/drush.php provision %s %s -b %s", $data['publish_path'] . '/' . drupal_get_path("module", "drush"), $data['action_type'], $data['site_url'], $option_str);
  return $command;
}

function hosting_action_request($node) {
  $options = hosting_available_actions(false, $node->type);

  $form['nid'] = array('#type' => 'value', '#value' => $node->nid);
  
  $form['action'] = array(
    '#type' => 'radios',
    '#title' => t('Action requested'),
    '#options' => $options
  );
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Request'),
  );
  
  return $form;
}

function hosting_action_request_submit($form_id, $values) {
  hosting_add_action($values['nid'], $values['action']);
  return 'node/' . $values['nid'];
}

function hosting_form_alter($form_id, &$form) {
  if ($form_id == 'site_node_form') {
    $form['title']['#validate']['hosting_validate_site_title'] = array($form['nid']['#value']);
  }
  if ($form_id == 'user_register') {
    $form['destination'] = array('#type' => 'hidden', '#value' => 'node/1');
    if ($_GET['q'] != 'user/register') {
      $form['notify'] = array('#type' => 'hidden', '#value' => false);
      $form['status'] = array('#type' => 'hidden', '#value' => 1);
      $form['pass'] = array('#type' => 'value', '#value' => user_password());
    }
  }
  if ($form_id == 'provision_configure') {
    $form['#submit']['hosting_configure_provision'] = array();
  }
}

function hosting_configure_provision($form_id, &$values) {
  /**
  * @todo Hosting site should have it's own site record.
  */

  $platform = node_load(variable_get('hosting_own_platform', 4));
  $platform->revision = true;
  $platform->field_platform_path[0]['value'] = $_SERVER['DOCUMENT_ROOT'];
  node_save($platform);

  $db_server = node_load(variable_get('hosting_own_db_server', 2));
  $db_server->revision = true;
  $db_server->title = $values['provision_db_host'];
  $db_server->field_master_username[0]['value'] = $values['provision_db_user'];
  $db_server->field_master_password[0]['value'] = $values['provision_db_password'];
  node_save($db_server);
  
  $web_server = node_load($platform->field_web_server[0]['nid']);
  $web_server->field_config_path[0]['value'] = $values['provision_config_path'];
  $web_server->revision = true;
 
  node_save($web_server);  
}

function hosting_configure_hosting($node) {
  if ($node->nid == variable_get('hosting_own_' . $node->type, null)) {
    switch ($node->type) {
      case 'platform' :
        variable_set('hosting_platform_path', $node->field_platform_path[0]['value']);
        break;
      case 'db_server' :
       variable_set('provision_db_host', $node->title);
       variable_set('provision_db_user', $node->field_master_username[0]['value']);
       variable_set('provision_db_password', $node->field_master_password[0]['value']);
        break;
      case 'db_server' :
        variable_set('provision_user', $node->field_user[0]['nid'] );
        variable_set('provision_group', $node->field_group[0]['nid']);
        variable_set('provision_config_path', $node->field_config_path[0]['nid']);
        variable_set('provision_backup_path', $node->field_backup_path[0]['nid']);
        break;                  
    }
  }
}

function hosting_nodeapi(&$node, $op, $teaser) {
  $func = "hosting_nodeapi_" . $node->type . "_" . $op;
  if (function_exists($func)) {
    $func($node, $op, $teaser);
  }
  # Keep own provisioning system up to date.
  if ($op == 'update') {
    hosting_configure_hosting($node);
  }
}

function hosting_nodeapi_site_validate(&$node, $op, $teaser) {
  $node->field_actions[0]['vname'] = 'actions';
  $node->field_actions[0]['vname'] = '%nid';
}

function hosting_nodeapi_site_insert(&$node, $op, $teaser) {
  hosting_add_action($node->nid, 'install');
}

function hosting_nodeapi_site_update(&$node, $op, $teaser) {
  hosting_add_action($node->nid, 'synch');
}


function hosting_nodeapi_site_view(&$node, $op, $teaser) {
  $view = views_get_view('actions_embed');
  $node->content['actions_view'] = array(
    '#type' => 'item',
    '#title' => t("Actions"),
    '#value' => views_build_view('embed', $view, array($node->nid)), 
    '#weight' => 10
  );
}

function hosting_nodeapi_platform_view(&$node, $op, $teaser) {
  $view = views_get_view('actions_embed');
  $node->content['actions_view'] = array(
    '#type' => 'item',
    '#title' => t("Actions"),
    '#value' => views_build_view('embed', $view, array($node->nid)), 
    '#weight' => 10
  );
}

function hosting_nodeapi_action_update(&$node, $op, $teaser) {
  if ($node->executed || $node->action_status) {
    db_query("INSERT INTO {action_data} (vid, nid, executed, action_status) VALUES (%d, %d, %d, %d)",
      $node->vid, $node->nid, $node->executed, $node->status);
  }
}

function hosting_nodeapi_action_load(&$node, $op, $teaser) {
  $result = db_query("SELECT executed, action_status FROM {action_data} WHERE vid=%d", $node->vid);
  if ($data = db_fetch_object($result)) {
    $node->executed = $data->executed;
    $node->action_status = $data->action_status;
  }
}

function hosting_nodeapi_action_view(&$node, $op, $teaser) {
  if ($node->executed) {
    $node->content['executed'] = array(
      '#type' => 'item',
      '#title' => t('Executed'),
      '#value' => format_date($node->executed),
    );
  }
  if ($node->action_status) {
    $node->content['status'] = array(
      '#type' => 'item',
      '#title' => t('Status'),
      '#value' => implode(", ", _hosting_parse_error_codes($node->action_status)),
    );
  }
    
  # Display table containing the logged information for this action
  $result = db_query("SELECT * FROM {action_log} WHERE vid=%d", $node->vid);
  if ($result) {
    $header = array("type", "message", "date");
    while ($entry = db_fetch_object($result)) {
      $rows[] = array($entry->type, $entry->message, format_date($entry->timestamp, "custom", "Y-m-d m:s"));
    }

    
    $node->content['hosting_log'] = array(
      '#weight' => 1,
      '#value' => theme_table($header, (array) $rows)
    );
    
  }
}

function hosting_nodeapi_client_view(&$node, $op, $teaser) {
  $view = views_get_view('sites_embed');
  $node->content['sites_view'] = array(
    '#type' => 'item',
    '#title' => t("Sites"),
    '#value' => views_build_view('embed', $view, array($node->nid)), 
    '#weight' => 10
  );  
}

function hosting_validate_site_title($element, $nid) {
  if (!preg_match("/^([\w-]+\.)+[a-z]{2,4}$/i", $element['#value'] ) ) {
    form_set_error('title', t("You have not specified a valid url for this site."));
  }
  if (db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type='site' AND title='%s' AND  nid <> %d", $element['#value'], $nid))) {
    form_set_error('title', t("The url you specified is not unique."));
  }
}



function hosting_available_actions($auto_detect = false, $type = null) {
  if ($auto_detect && !$type) {
    if (arg(0) == 'node') {
      if (is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $type = $node->type;
      }
      elseif (arg(1) == 'add') {
        $type = arg(2);
      }
    }
  }
  if ($type == 'site') {
    $options['backup'] = t('Backup site');
    $options['synch'] = t('Regenerate configuration files');

    if ($node) {
      if ($node->field_status[0]["value"] == "Enabled") {
        $options['disable'] =  t('Disable an enabled site.');      
      }
      elseif ($node->field_status[0]["value"] == "Disabled") {
        $options['enable'] = t('Enable a disabled site.');      
      }
    }
  }
  elseif ($type == 'platform') {
    $options['verify'] = t('Verify that a platform is correctly installed.');
  }
  return $options;
}