<?php
/**
 * @file Client node type is defined here.
 */

include('hosting_client.access.inc');

function hosting_client_provision_args($node, $task = '') {
  $values = array();
  if ($node->type == 'site' && $task == 'install') {
    $client = node_load($node->client);
    $values['client_id'] = $node->client;
    $values['client_email'] = $client->email;
  }
  return $values;
}

function hosting_client_node_info() {
  $types["client"] =  array(
    "type" => 'client', "name" => 'Client',
    "module" => 'hosting_client',
    "has_title" => TRUE, "title_label" => 'Client', 
    "description" => hosting_node_help("client"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);

  return $types;
}

/**
 * Hook definining hosting related features
 * 
 * Used to simplify the interface.
 */
function hosting_client_hosting_feature() {
  $features['client'] = array(
      'title' => t('Clients'), 
      'description' => t('Track and manage ownership of hosted.'),
      'status' => HOSTING_FEATURE_DISABLED,
      'node' => 'client',
      'group' => 'experimental',
    );
  return $features;
}


function hosting_client_perm() {
  return array('create client','view client', 'edit own client', 'delete own client', 'administer clients', 'administer client users');
}

function hosting_client_access($op, $node) {
  if (!hosting_feature('client')) {
    // multiple client support has been disabled for this site.
    return FALSE;
  }

  if (user_access('administer_clients')) {
    return TRUE;
  }
  else {
    global $user;
    switch ($op) {
      case 'create': 
        return user_access('create client');
        break;
      case 'view':
        return user_access('view client');
        break;
      case 'update':
        if (user_access('edit own client') && $user->uid == $node->uid) {
          return TRUE;
        }
        break;
      case 'delete':
        if ((user_access('delete own client') && $user->uid == $node ->uid)) {
          return TRUE;
        }
        break;
      default:
        break;
    }
  }
}

function hosting_get_client($client) {
  if (is_numeric($client)) {
    $result = db_result(db_query("SELECT nid FROM {hosting_client} WHERE nid = %d", $client));
  }
  else {
    $result = db_result(db_query("SELECT c.nid FROM {hosting_client} c JOIN {node} n ON c.nid = n.nid WHERE (n.title = '%s' OR c.email = '%s') AND n.type = 'client'", $client));
  }

  if ($result) {
    return node_load($result);
  }
  return false;
}

function hosting_get_client_by_email($email) {
  $result = db_result(db_query("SELECT c.nid FROM {hosting_client} c  WHERE c.email = '%s'", $email));
  if ($result) {
    return node_load($result);
  }
  return false;
}

/**
 * Implementation of hook_form().
 */
function hosting_client_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array('#type' => 'hidden', '#value' => $node->title);

   $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => $node->email,
    '#maxlength' => 100,
  ); 

  if (!$node->nid) {
    $form['email_confirm'] = array(
      '#type' => 'textfield',
      '#title' => t('Confirm Email address'),
      '#required' => TRUE,
      '#size' => 40,
      '#maxlength' => 100,
    ); 
  }

  $form['client_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact name'),
    '#size' => 40,
    '#default_value' => $node->client_name,
    '#maxlength' => 50,
  );

  $form['organization'] = array(
    '#type' => 'textfield',
    '#title' => t('Organization'),
    '#size' => 40,
    '#default_value' => $node->organization,
    '#maxlength' => 100,
  );

  
  return $form;
}

/**
 * Implementation of hook_validate() 
 */
function hosting_client_validate(&$node) {

  $nid = db_result(db_query("SELECT nid FROM {hosting_client} WHERE email='%s'", $node->email));
  if ($nid) {
    if ($node->nid != $nid) {
      form_set_error('email', t("Email address already exists."));
    }
  }
  if (!$node->nid) {
    if ($node->email != $node->email_confirm) {
      form_set_error('email_confirm', t("Email addresses do not match"));
    }
  }
  if (!valid_email_address($node->email)) {
    form_set_error('email', t("Email address invalid."));
  }
}

function hosting_client_set_title(&$node) {
  if ($node->organization && $node->name) {
    $node->title = $node->client_name . ' ('.$node->organization.')';
  }
  elseif ($node->name) {
    $node->title = $node->client_name . ' ('.$node->email.')';
  }
  elseif ($node->organization) {
    $node->title = $node->organization . ' ('.$node->email.')';
  }
  else {
    $node->title = $node->email;
  }
  $node->title = filter_xss($node->title);
  db_query("UPDATE {node} SET title='%s' WHERE nid=%d", $node->title, $node->nid);
  db_query("UPDATE {node_revisions} SET title='%s' WHERE vid=%d", $node->title, $node->vid);
}


/**
 * Implementation of hook_insert().
 */
function hosting_client_insert($node) {
  db_query("INSERT INTO {hosting_client} (vid, nid, name, organization, email) VALUES (%d, %d, '%s', '%s', '%s' )",
    $node->vid, $node->nid, $node->client_name, $node->organization, $node->email);
  hosting_client_set_title($node);
  if ($node->register_user) {
    hosting_client_register_user($node);
  }
}

function hosting_client_register_user($node) {
  //register a new user account for the client
  $user = new stdClass();
  $user->name = $node->client_name;
  $user->hosting_client = $node->nid;
  $user->email = $node->email;
  $user->pass = user_password();
  user_save($user, $edit);
  if ($node->send_welcome) {
    # @TODO: send welcome mail on new user registration
  }
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_client_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_client_insert($node);
  }
  else {
    db_query("UPDATE {hosting_client} SET nid=%d, name = '%s', organization = '%s', email='%s' WHERE vid=%d",
              $node->nid, $node->client_name, $node->organization, $node->email, $node->vid);
  }
  hosting_client_set_title($node);  
}

function hosting_nodeapi_client_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_client} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_client_delete($node) {
  db_query('DELETE FROM {hosting_client} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_client_load($node) {
  $additions = db_fetch_object(db_query('SELECT name as client_name, organization, email FROM {hosting_client} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_client_view($node, $teaser = FALSE, $page = FALSE) {
  if ( $node->organization ) {
    $node->content['organization'] = array(
      '#type' => 'item',
      '#title' => t('Organization'),
      '#value' => filter_xss($node->organization),
    );
  }
  if ( $node->client_name ) {
    $node->content['name'] = array(
      '#type' => 'item',
      '#title' => t('Contact name'),
      '#value' => filter_xss($node->client_name),
    );
  }
  if ($node->name || $node->email) {
    $node->content['email'] = array(
      '#type' => 'item',
      '#title' => t('Email'),
      '#value' => filter_xss($node->email),
    );
  }
  if ($page) {
    $node->content['sites_view'] = array(
      '#type' => 'item',
      '#title' => t("Sites"),
      '#value' => hosting_site_list("client", $node->nid), 
      '#weight' => 10
    );
  }
  return $node;
}

/**
 * Helper function to generate new client node during import
 *
 * @param email
 *   Client email address - Required
 * @param contact_name
 *   Client contact name - Optional
 * @param existing
 *   Return an existing client registered for this email address, defaults to FALSE
 * @return
 *   The nid of the generated client
 */
function hosting_import_client($email, $name = '', $organization = '') {
  $client = new stdClass();
  $client->type = 'client';
  $client->email = $email;
  $client->contact_name = trim($name);
  $client->organization = $organization;
  $client->status = 1;
  node_save($client);
  return $client;
}

/**
 * Implementation of hook_menu()
 */
function hosting_client_menu() {
  if (!$may_cache) {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'client') {
        $site = new stdClass();
        $site->type = 'site';
        $site->client = arg(1);
        $items[] = array(
          'path' => 'node/'. $node->nid .'/site/add',
          'title' => t('Add site'),
          'description' => t('Add a site to the current client'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('site_node_form', $site),
          'type' => MENU_LOCAL_TASK,
          'weight' => 5,
        );
      }
    }
    $items[] = array(
      'path' => 'hosting_client/autocomplete', 
      'title' => t('hosting client get client autocomplete'),
      'callback' => 'hosting_client_autocomplete', 
      'access' => TRUE, 
      'type' => MENU_CALLBACK
    );

  }
  return $items;
}

/**
 * Retrieve autocomplete suggestions
 */
function hosting_client_autocomplete($type, $keyword) {
  $matches = array();
  
  if ($type == 'client') {
    $query = db_query('SELECT *FROM {node} WHERE type = "%s" AND title LIKE "%s"', $type, $keyword. "%");
    while ($result = db_fetch_object($query)) {
      $matches[$result->title] = $result->title;
    }
  }
 
  print drupal_to_js($matches);
  exit();
}

