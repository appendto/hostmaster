<?php
/**
 * @file Client node type is defined here.
 */


function hosting_client_provision_args($node, $task = '') {
  $values = array();
  if ($node->type == 'site' && $task == 'install') {
    $client = node_load($node->client);
    $values['client_id'] = $node->client;
    $values['client_email'] = $client->email;
  }
  return $values;
}

function hosting_client_node_info() {
  $types["client"] =  array(
    "type" => 'client', "name" => 'Client',
    "module" => 'hosting_client',
    "has_title" => TRUE, "title_label" => 'Client', 
    "description" => hosting_node_help("client"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);

  return $types;
}

/**
 * Hook definining hosting related features
 * 
 * Used to simplify the interface.
 */
function hosting_client_hosting_features() {
  return array('client' => array(
      'title' => t('Client management (experimental)'), 
      'description' => t('Enable this feature if you will have multiple clients with sites running on your system. It is generally not recommended to enable this feature if your hosting site is only going to be used internally, and will not be accessed by clients. Clients will only be able to view their own sites.'),
      'status' => HOSTING_FEATURE_DISABLED));
}


function hosting_client_perm() {
  return array('create client','view client', 'edit own client', 'delete own client', 'administer clients');
}

function hosting_client_access($op, $node) {
  if (!hosting_feature('client')) {
    // multiple client support has been disabled for this site.
    return FALSE;
  }

  if (user_access('administer_clients')) {
    return TRUE;
  }
  else {
    global $user;
    switch ($op) {
      case 'create': 
        return user_access('create client');
        break;
      case 'view':
        return user_access('view client');
        break;
      case 'update':
        if (user_access('edit own client') && $user->uid == $node->uid) {
          return TRUE;
        }
        break;
      case 'delete':
        if ((user_access('delete own client') && $user->uid == $node ->uid)) {
          return TRUE;
        }
        break;
      default:
        break;
    }
  }
}

function hosting_get_client($email) {
  $result = db_result(db_query("SELECT nid FROM {hosting_client} WHERE email='%s'", $email));
  if ($result) {
    return node_load($result);
  }
  return false;
}

/**
 * Small helper function to get clients.
*/ 
function _hosting_get_clients() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='client' AND status=1");
  while($client = db_fetch_object($result)) {
    $return[$client->nid] = $client->title;
  }
  return $return;
}

/**
 * Implementation of hook_form().
 */
function hosting_client_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array('#type' => 'hidden', '#value' => $node->title);

   $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => $node->email,
    '#maxlength' => 255,
  ); 

  $form['client_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact name'),
    '#size' => 40,
    '#default_value' => $node->client_name,
    '#maxlength' => 255,
  );

  $form['organization'] = array(
    '#type' => 'textfield',
    '#title' => t('Organization'),
    '#size' => 40,
    '#default_value' => $node->organization,
    '#maxlength' => 255,
  );


  
  return $form;
}

/**
 * Implementation of hook_validate() 
 */
function hosting_client_validate(&$node) {

  $nid = db_result(db_query("SELECT nid FROM {hosting_client} WHERE email='%s'", $node->email));
  if ($nid) {
    if ($node->nid != $nid) {
      form_set_error('email', t("Email address already exists."));
    }
  }
  if (!valid_email_address($node->email)) {
    form_set_error('email', t("Email address invalid."));
  }
}

function hosting_client_set_title(&$node) {
  if ($node->organization && $node->name) {
    $node->title = $node->client_name . ' ('.$node->organization.')';
  }
  elseif ($node->name) {
    $node->title = $node->client_name . ' ('.$node->email.')';
  }
  elseif ($node->organization) {
    $node->title = $node->organization . ' ('.$node->email.')';
  }
  else {
    $node->title = $node->email;
  }
  db_query("UPDATE {node} SET title='%s' WHERE nid=%d", $node->title, $node->nid);
  db_query("UPDATE {node_revisions} SET title='%s' WHERE vid=%d", $node->title, $node->vid);
}


/**
 * Implementation of hook_insert().
 */
function hosting_client_insert($node) {
  db_query("INSERT INTO {hosting_client} (vid, nid, name, organization, email) VALUES (%d, %d, '%s', '%s', '%s' )",
    $node->vid, $node->nid, $node->client_name, $node->organization, $node->email);
  hosting_client_set_title($node);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_client_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_client_insert($node);
  }
  else {
    db_query("UPDATE {hosting_client} SET nid=%d, name = '%s', organization = '%s', email='%s' WHERE vid=%d",
              $node->nid, $node->client_name, $node->organization, $node->email, $node->vid);
  }
  hosting_client_set_title($node);  
}

function hosting_nodeapi_client_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_client} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_client_delete($node) {
  db_query('DELETE FROM {hosting_client} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_client_load($node) {
  $additions = db_fetch_object(db_query('SELECT name as client_name, organization, email FROM {hosting_client} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_client_view($node, $teaser = FALSE, $page = FALSE) {
  if ( $node->organization ) {
    $node->content['organization'] = array(
      '#type' => 'item',
      '#title' => t('Organization'),
      '#value' => $node->organization,
    );
  }
  if ( $node->name ) {
    $node->content['name'] = array(
      '#type' => 'item',
      '#title' => t('Contact name'),
      '#value' => $node->client_name,
    );
  }
  if ($node->name || $node->email) {
    $node->content['email'] = array(
      '#type' => 'item',
      '#title' => t('Email'),
      '#value' => $node->email,
    );
  }
  
  $node->content['sites_view'] = array(
    '#type' => 'item',
    '#title' => t("Sites"),
    '#value' => hosting_site_list("client", $node->nid), 
    '#weight' => 10
  );
  return $node;
}


