<?php
function hosting_get_db_server($hostname, $web_server = null) {
  if (_hosting_valid_ip($hostname)) {
    $ip = $hostname;
    $hostname = gethostbyaddr($hostname);
  }
  else {
    $ip = gethostbyname($hostname);
  }
  $result = db_result(db_query("SELECT nid FROM {node} WHERE title in ('%s', '%s') and type='db_server'", $ip, $hostname));
  if ($result) {
    return node_load($result);
  }

  return false;
}



function hosting_db_server_node_info() {
  $types["db_server"] =  array(
    "type" => 'db_server', "name" => 'Database server',
    "module" => 'hosting_db_server',
    "has_title" => TRUE, "title_label" => t('Host name'), 
    "description" => hosting_node_help("db_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    
  return $types;
}

function hosting_db_server_hosting_features() {
  $features['db_server'] = array(
    'title' => t('Additional database servers (experimental)'),
    'description' => t('Enable this feature if you need to install sites using database servers other than the server your hosting site is using. Users with the right permissions will be able to select which database server to install new sites on'),
    'status' => HOSTING_FEATURE_DISABLED);
  return $features;

}

function hosting_db_server_perm() {
  return array('create database server','view database server', 'edit database server', 'delete database server');
}

function hosting_db_server_access($op, $node) {
  global $user;

  switch($op) {
    case 'create':
      return user_access('create database server');
      break;
    case 'view':
      return user_access('view database server');
      break;
    case 'update':
      return user_access('edit database server');
      break;
    case 'delete':
      return user_access('delete database server');
      break;
    default:
      break;
  }

//  return hosting_access($op, $node);
}

/**
 * Small helper function to get web servers.
*/ 
function _hosting_get_db_servers() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='db_server' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}


function hosting_map_values_db_server($node) {
  $values['db_id'] = $node->nid;
  $values['site_db_host'] = $node->title;
  $values['site_db_type'] = $node->db_type;
  $values['provision_db_user'] = $node->db_user;
  $values['provision_db_passwd'] = $node->db_passwd;

  $values['#export_db_server'] = array('site_db_host', 'site_db_type');
     
  return $values;
}


/**
 * Implementation of hook_form().
 */
function hosting_db_server_form(&$node) {
  $type = node_get_types('type', $node);

  // We need to define form elements for the node's title and body.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  // merge the web server configuration.
  $form += provision_mysql_provision_configure($node);
  unset($form['db_host']);
  return $form;
}

/**
 * Implementation of hook_validate().
  */
function hosting_db_server_validate(&$node) {
  if (!$node->db_passwd && $node->nid) {
    $old = node_load($node->nid);
    $node->db_passwd = $old->db_passwd;
  }
  # TODO : check paths. kind of tricky actually, due to multiple servers etc.
}

/**
 * Implementation of hook_insert().
 */
function hosting_db_server_insert($node) {
  db_query("INSERT INTO {hosting_db_server} (vid, nid, db_type, db_user, db_passwd) 
      VALUES (%d, %d, '%s', '%s', '%s')", 
        $node->vid, $node->nid, $node->db_type, $node->db_user, $node->db_passwd);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_db_server_update($node) {
  if ($node->nid == HOSTING_OWN_DB_SERVER) {
    variable_set('provision_db_host', $node->title);
    variable_set('provision_db_user', $node->db_user);
    variable_set('provision_db_passwd', $node->db_passwd);
    variable_set('provision_db_type', $node->db_type);
  }

  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_db_server_insert($node);
  }
  else {
    db_query("UPDATE {hosting_db_server} SET 
                  db_type = '%s', db_user = '%s'
              WHERE 
                  vid = %d", 
                  $node->db_type, $node->db_user, $node->vid);
  }
}

function hosting_nodeapi_db_server_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_db_server} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_db_server_delete($node) {
  db_query('DELETE FROM {hosting_db_server} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_db_server_load($node) {
  $additions = db_fetch_object(db_query('SELECT db_type, db_user, db_passwd FROM {hosting_db_server} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_db_server_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node->content['db_type'] = array(
    '#type' => 'item',
    '#title' => t('Database type'),
    '#value' => $node->db_type,
  );
  
  $node->content['db_user'] = array(
    '#type' => 'item',
    '#title' => t('Database user'),
    '#value' => $node->db_user,
  );

  $node->content['sites_view'] = array(
    '#type' => 'item',
    '#title' => t("Sites"),
    '#value' => hosting_site_list("db_server", $node->nid), 
    '#weight' => 10
  );
  
  return $node;
}


/**
 * Create the configuration file containing the master database credentials
 *
 * Outside of web root. not readable by web server. _important_
 */
function _hosting_generate_database_config_file($node) {
  if ($node->type != "db_server") {
    return null;
  }
  $path = _provision_config_path();
  
}
