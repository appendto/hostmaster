<?php

include_once('hosting_site_status.inc');

/**
 * Implementation of hook_node_info
 */
function hosting_site_node_info() {
  $types["site"] =  array(
    "type" => 'site', "name" => 'Site',
    "module" => 'hosting_site',
    "has_title" => TRUE, "title_label" => 'Domain name', 
    "description" => hosting_node_help("site"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  return $types;
}


/**
 * implementation of hook_hosting_tasks
 */
function hosting_site_hosting_tasks($node) {
  $options = array();
  if ($node->type == 'site') {
    if (hosting_task_outstanding($node->nid, 'delete') || ($node->site_status & HOSTING_SITE_DELETED)) {
      return $options;
    }
    if (hosting_task_outstanding($node->nid, 'enable') || ($node->site_status & HOSTING_SITE_ENABLED)) {
      $options['backup'] = array(
        'title' => t('Backup'),
        'description' => t('Generate a backup of this site that can be restored to at any time'),
        'weight' => 7
       );

      $options['restore'] = array(
        'title' => t('Restore'),
        'description' => t('Restore this site to a previous backup. A new backup will be created before this is attempted.'),
        'weight' => 7,
      );

      $options['verify'] = array(
        'title' => t('Verify'),
        'description' => t('Confirm that the site has been correctly installed and regenerate all configuration files to match the hosting front end.'),
        'weight' =>  9,
      );

      $options['disable'] = array(
        'title' =>  t('Disable'),
        'description' =>  t('Disabling this site will stop it from being accessible.
             It can be enabled again later.'),     
        'weight' =>  4,
      );     
    }
    else {
      $options['enable'] = array(
        'title' => t('Enable'),
        'description' => t('Enabling this site will allow it to be accesible again.
             It may be disabled again if needed.'),
        'weight' =>  4,     
      );
      $options['delete'] = array(
        'title' => t('Delete'),
        'description' => t('Deleting this site will completely remove it from the hosting system,
            but will keep the last backup available. This process can not be undone.
            Are you really sure you want to delete this site?'),
        'weight' => 10,
      );
    }
  }
  return $options;
}

/**
 * Implementation of hook_perm
 */
function hosting_site_perm() {
  return array('create site', 'view site', 'edit site', 'delete site', 'administer site');
}

/**
 * Implementation of hook_access
 */
function hosting_site_access($op, $node) {
  switch ($op) {
    case 'create':
      return user_access('create site');
      break;
    case 'update':
      return user_access('edit site');
      break;
    case 'delete':
      return user_access('delete site');
      break;
    default:
      break;
  }
}

/**
 * Map values of site node into command line arguments
 */
function hosting_site_provision_args($node, $task = '') {
  $values = array();
  if ($node->type == 'site') {
    $values['1'] = $node->title;
    $values['site_id'] = $node->nid;
    if ($task != 'import') {
      $values['language'] = $node->language;
    }
  }
  if ($node->type == 'task' && $task == 'restore') {
    $backup = hosting_site_get_backup($node->task_args['bid']);
    $values['2'] = $backup['filename'];
  }
  return $values;
}

/**
 * Return a count of enabled sites.
 *
 * This is used by cron and statistics to batch the number of sites that are processed with each call
 */
function hosting_site_count() {
  return db_result(db_query("SELECT count(nid) FROM {node} WHERE type='site' AND status=1"));
}

/**
 * Retrieve sites on a specific platform, with a specific status
 */
function hosting_get_sites_by_status($platform, $status) {
  $nodes = array();
  $result = db_query("SELECT nid FROM {hosting_site} WHERE platform=%d AND (status & %d)", $platform, $status);
  while ($nid = db_fetch_object($result)) {
    $nodes[$nid->nid] = node_load($nid->nid);
  }

  return $nodes;
}

/**
 * Helper function to generate new site node during import
 */
function hosting_import_site($site_id, $data, $status, $platform = HOSTING_DEFAULT_PLATFORM) {
  global $user;
  $client = node_load(HOSTING_DEFAULT_CLIENT);

  if ($data['client_email']) {
    if (!($client = hosting_get_client_by_email($data['client_email']))) {
      $client = hosting_import_client($data['client_email'], $data['client_name'], $data['client_organization']);
    }
  }

  $site = new stdClass();
  $site->nid = $site_id;
  $site->uid = $client->uid;
  $site->status = 1;
  $site->platform = $platform;
  $site->client = $client->nid;
  $db_server = hosting_get_db_server($data['db_id']);
  $site->db_server = ($db_server) ? $db_server->nid : HOSTING_DEFAULT_DB_SERVER;

  #$site->language = $data['language'] ? $data['language'] : 'en';
  // This should really be handled via a hook system, to allow hosting_alias to see these fields, but later.
  #$site->aliases = $data['aliases'] ? $data['aliases'] : array();

  // need to build some error tolerance in here
  $profile = hosting_get_package_instance($platform, $data['profile']);
  if (!$profile) {
   $profile = hosting_get_package_instance($platform, 'default');
  }
  $site->profile = $profile->nid;
  $site->site_status = $status;

  // cast site object to array, will be using various array_* functions on the data.
  $site = (array) $site;

  // Protect the fields already in the site object.
  foreach (array_keys($site) as $key) {
    unset($data[$key]);
  }

  // Load all the original node fields.
  $site = array_merge( (array) node_load($site_id), $site);

  // Map the imported fields onto the node object.
  $site = array_merge($site, $data);

  // Cast back to object.
  $site = (object) $site;
  node_save($site);
}

/**
 * implementation of the hosting_post_install hook
 */
function hosting_site_hosting_post_install($task, $data) {
  db_query("UPDATE {hosting_site} SET status=(status|%d|%d)&~%d WHERE nid=%d", HOSTING_SITE_INSTALLED, HOSTING_SITE_ENABLED, HOSTING_SITE_DELETED, $task->rid);
}

/**
 * Implementation of the hosting_failed_install hook
 */
function hosting_site_hosting_failed_install($task, $data, $code) {
  print_r($data);
  // @TODO : we need to check the returned list of errors, not the code. 
  if (array_key_exists('PROVISION_DRUPAL_SITE_INSTALLED', $data['error_log'])) {
    // Site has already been installed. Try to import instead.
    hosting_task_log($task->vid, 'notice', t("This site appears to be installed already. Generating an import task."));
    hosting_add_task($task->rid, 'import');
  }
}

/**
 * implementation of hook_hosting_post_disable
 * I am not very fond of the use of bitwise operators with negatives.
 */
function hosting_site_hosting_post_disable($task, $data) {
  $ref = node_load($task->rid);
  if ($data['options']['backup_file'] && $ref->type == 'site') {
    $platform = node_load($ref->platform);
    hosting_site_add_backup($ref->nid, $platform->web_server, $data['options']['backup_file'], t('Generated before being disabled'));
  }
  db_query("UPDATE {hosting_site} SET status=status&%d WHERE nid=%d", HOSTING_SITE_DISABLED, $task->rid);
}

/**
 * implementation of hook_hosting_post_restore
 * I am not very fond of the use of bitwise operators with negatives.
 */
function hosting_site_hosting_post_restore($task, $data) {
  $ref = node_load($task->rid);
  if ($data['options']['backup_file'] && $ref->type == 'site') {
    $platform = node_load($ref->platform);
    hosting_site_add_backup($ref->nid, $platform->web_server, $data['options']['backup_file'], t('Generated before being restored to a previous version'));
  }
}

/**
 * implementation of hook_hosting_post_enable
 */
function hosting_site_hosting_post_enable($task, $data) {
  db_query("UPDATE {hosting_site} SET status=status|%d WHERE nid=%d", HOSTING_SITE_ENABLED, $task->rid);
}

/**
 * implementation of hook_hosting_post_DELETE
 */
function hosting_site_hosting_post_delete($task, $data) {
  db_query("UPDATE {hosting_site} SET status=%d WHERE nid=%d", HOSTING_SITE_DELETED, $task->rid);
}

/**
 * Implementation of hook_form
 *
 * TODO: additional nested logic. Certain profiles are available only on certain platforms, and certain languages on certain profiles.
 */
function hosting_site_form($node) {
  drupal_add_js(drupal_get_path('module', 'hosting_site') . '/hosting_site_form.js');
  drupal_add_css(drupal_get_path('module', 'hosting_site') . '/hosting_site_form.css');

  $type = node_get_types('type', $node);
  
  // We need to define form elements for the node's title and body.
  if (!$node->nid) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Domain name'),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }
  else {
    $form['title'] = array('#type' => 'hidden', '#value' => $node->title);
  }


  # find the right client
  if ($node->client) {
    $client = node_load($node->client);
  } else {
    global $user;
    # default to the user' client if available
    if ($user->hosting_client) {
      $client = hosting_get_client($user->hosting_client);
    } else {
      $client = node_load(HOSTING_DEFAULT_CLIENT);
    }
  }

  if ((!$node->client || $node->nid) && user_access('administer site')) {
    $form['client'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Client'),
      '#default_value' => $client->title,
      '#description' => t('The client who this site belongs to.'),
      '#autocomplete_path' => 'hosting_client/autocomplete/client',
    );
  }
  else {
    $form['client'] = array('#type' => 'hidden', '#value' => $client->title);
  }

  if (!$node->nid) {
    $platforms = _hosting_get_platforms();
    if (sizeof($platforms) > 1) {
      $form['platform'] = array(
        '#type' => 'radios',
        '#title' => t('Platform'),
        '#required' => TRUE,
        '#description' => t('The platform you want the site to be hosted on.'),
        '#options' => $platforms,
        '#default_value' => $node->platform ? $node->platform : HOSTING_DEFAULT_PLATFORM,
      );
    }
    else {
      $form['platform'] = array('#type' => 'hidden', '#value' => key($platforms));
    }
    $form['profile'] = _hosting_site_form_profile();
    $form['language'] = _hosting_site_form_language();
  }
  else {
    $form['platform'] = array('#type' => 'hidden', '#value' => $node->platform);
    $form['profile'] = array('#type' => 'hidden', '#value' => $node->profile);
    $form['language'] = array('#type' => 'hidden', '#value' => $node->language);
  }

  $db_servers = _hosting_get_db_servers();
  if (sizeof($db_servers) > 1) {
    $form['db_server'] = array(
      '#type' => 'radios',
      '#title' => t('Database server'),
      '#required' => TRUE,
      '#description' => t('The database server the site will use to host it\'s content.'),
      '#options' => $db_servers,
      '#default_value' => $node->db_server,
    );
  }
  else {
    $form['db_server'] = array('#type' => 'hidden', '#value' => key($db_servers));
  } 
 
  return $form;
}

function _hosting_site_validate_fqdn($fqdn) {
  # regex is an implementation of RFC1035
  return preg_match("/^([a-z0-9]([a-z0-9-]*[a-z0-9])?\.?)+$/i", $fqdn);
}

function hosting_site_validate(&$node) {
  if (!_hosting_site_validate_fqdn($node->title)) {
    form_set_error('title', t("You have not specified a valid url for this site."));
  }
  # TODO: maybe we should allow creation of sites that conflict with HOSTING_SITE_DISABLED (which would then need to be renamed before being re-enabled)
  if (hosting_site_exists($node->title, $node->nid)) {
    form_set_error('title', t("The domain name you have specified is not unique."));
  }
  if (!$node->new_client && !hosting_get_client($node->client)) {
    form_set_error('client', t('Please fill in a valid client'));
  }
  if (!array_key_exists($node->profile, hosting_get_profiles($node->platform))) {
    form_set_error('profile', t('Please fill in a valid profile'));
  }
  if (!array_key_exists($node->language, hosting_get_profile_languages($node->profile, $node->platform))) {
    form_set_error('language', t('Please fill in a valid language'));
  }

}

function hosting_site_insert(&$node) {
  if (!($node->site_status & HOSTING_SITE_IMPORTED)) {
    $node->site_status = HOSTING_SITE_ENABLED; # HOSTING_SITE_NOTINSTALLED implicit
  }
  
  $client = hosting_get_client($node->client);
  $node->client = $client->nid;
  $node->language = ($node->language) ? $node->language : 'en';

  db_query("INSERT INTO {hosting_site} (vid, nid, client, db_server, platform, profile, language, last_cron, status) VALUES (%d, %d, %d, %d, %d, %d, '%s', %d, %d)",
    $node->vid, $node->nid, $node->client, $node->db_server, $node->platform, $node->profile, $node->language, $node->last_cron, $node->site_status);
  if ((!$node->old_vid)) {
    if ($node->site_status & HOSTING_SITE_IMPORTED) {
      hosting_add_task($node->nid, 'import');
    }
    else {
      hosting_add_task($node->nid, 'install');
    }
  }
}
 
function hosting_site_update(&$node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_site_insert($node);
  }
  else {
    $client = hosting_get_client($node->client);
    $node->client = $client->nid;
    db_query("UPDATE {hosting_site} SET client = %d, db_server = %d, platform = %d, last_cron = %d, status = %d, profile = %d, language = '%s' WHERE vid=%d",
              $node->client, $node->db_server, $node->platform, $node->last_cron, $node->site_status, $node->profile, $node->language, $node->vid);
  }
  if (!$node->no_verify) {
    hosting_add_task($node->nid, 'verify');
  }
}

function hosting_site_load($node) {
  $additions = db_fetch_object(db_query('SELECT  client, db_server, platform, profile, language, last_cron, status  AS site_status FROM {hosting_site} WHERE vid = %d', $node->vid));
  return $additions;
}

function hosting_site_view(&$node, $teaser = false) {
  hosting_set_breadcrumb($node);
  $node->content['info']['#prefix'] = '<div id="hosting-site-info">';
  if (($node->site_status & HOSTING_SITE_ENABLED) && ($node->site_status & HOSTING_SITE_INSTALLED)) {
    $node->content['info']['link'] = array(
      '#value' => l(t('Go to site'),
      'http://' . $node->title),
      '#weight' => -10
    );
  }

  if (is_numeric($node->client)) {
    $node->content['info']['client'] = array(
      '#type' => 'item',
      '#title' => t('Client'),
      '#value' => _hosting_node_link($node->client),
      '#weight' => 5
    );
  }

  $node->content['info']['platform'] = array(
    '#type' => 'item',
    '#title' => t('Platform'),
    '#value' => _hosting_node_link($node->platform),
  );

  if ($node->profile) {
    $node->content['info']['profile'] = array(
      '#type' => 'item',
      '#title' => t('Install profile'),
      '#value' => _hosting_node_link($node->profile),
    );
  }
  if ($node->language) {
    $node->content['info']['language'] = array(
      '#type' => 'item',
      '#title' => t('Language'),
      '#value' => _hosting_language_name($node->language),
    );
  }
  if ($node->db_server) {
    $node->content['info']['db_server'] = array(
      '#type' => 'item',
      '#title' => t('Database server'),
      '#value' => _hosting_node_link($node->db_server),
    );
  }

  if ($node->nid) { 
    $site_status = array(hosting_site_status_output($node->site_status));
    $install_status = hosting_site_task_status($node->nid);
    if ($install_status) {
      $site_status[] = $install_status;
    }
    $node->content['info']['status'] = array(
      '#type' => 'item',
      '#title' => t('Status'),
      '#value' => join(', ', $site_status),
    );
  }

  $node->content['info']['#suffix'] = '</div>';

  if ($node->nid) { 
    $node->content['tasks_view'] = array(
      '#type' => 'item',
      '#value' => hosting_task_list_embedded('rid', $node->nid),
      '#prefix' => '<div id="hosting-task-list">',
      '#suffix' => '</div>', 
      '#weight' => 10
    );
  }
  return $node;
}

/**
 * Add a site backup record.
 *
 * Builds a list of backups of the site that have been generated.
 */
function hosting_site_add_backup($site, $web_server, $filename, $description = '') {
  $bid = db_next_id("{hosting_site_backups}_bid");
  db_query("INSERT INTO {hosting_site_backups} (bid, site, web_server, filename, description, timestamp) VALUES (%d, %d, %d, '%s', '%s', %d)",
    $bid, $site, $web_server, $filename, $description, mktime());
  return $bid;
}

/**
 * Delete a site backup record
 */
function hosting_site_delete_backup($bid) {
  db_query("DELETE FROM {hosting_site_backups} WHERE bid=%d", $bid);
}

/**
 * Get a site backup record
 */
function hosting_site_get_backup($bid) {
  return db_fetch_array(db_query("SELECT bid, site, web_server, filename, description, timestamp FROM {hosting_site_backups} WHERE bid = %d", $bid));
}

/**
 * Retrieve a list of backup generated for a site.
 *
 * @param site
 *   The node if of the site backups are being retrieved for
 * @return
 *   An associative array of backups existing for the site, indexed by bid and sorted reverse chronologically.
 */
function hosting_site_backup_list($site) {
  $result = db_query("SELECT bid, description, timestamp FROM {hosting_site_backups} WHERE site=%d ORDER BY timestamp DESC", $site);
  while ($object = db_fetch_object($result)) {
    #needs to be cleaned up. but i am NOT generating a theme func for this right now.
    $backups[$object->bid] = '<strong>' . format_date($object->timestamp) . '</strong> - ' . $object->description;
  }
  return $backups;
}

/**
 * Implementation of hook_hosting_post_backup
 *
 * Adds the data file that was saved to the site backup history.
 * This is needed to be able to restore.
 */
function hosting_site_hosting_post_backup($task, $data) {
  $ref = node_load($task->rid);
  if ($data['options']['backup_file'] && $ref->type == 'site') {
    $platform = node_load($ref->platform);
    hosting_site_add_backup($ref->nid, $platform->web_server, $data['options']['backup_file'], t('Generated on request'));
  }
}


/**
 * Hide the delete button on site nodes
 */
function hosting_site_form_alter($form_id, &$form) {
  // Remove delete button from site edit form
  if ($form_id == 'site_node_form') {
    $form['delete']['#type'] = 'hidden';
  }
}

/**
 * Check if site with URL already exists.
 *
 * This function hooks into hook_allow_domain to let contrib modules
 * weigh in on whether the site should be created.
 */
function hosting_site_exists($url, $nid = null) {
  $results = module_invoke_all('allow_domain', $url, $nid);
  $result = in_array(TRUE, $results);
  return $result; 
}

/*
 * Check if a site with a specific url exists, ignoring deleted sites
 */
function hosting_site_allow_domain($url, $nid=null) {
  $query = "SELECT COUNT(n.nid) FROM 
    {node} n JOIN {hosting_site} h 
    ON n.nid = h.nid WHERE type='site'
    AND title='%s' AND h.status & %d";
  $args[] = $url;
  $args[] = ~HOSTING_SITE_DELETED;

  if ($nid) {
    $query .= ' AND n.nid <> %d';
    $args[] = $nid;
  }
  return db_result(db_query($query, $args));
}

function hosting_site_task_status($nid) {
  return hosting_task_status_output('nid', $nid, 'install');
}

/**
 * Display a list of created sites on the front page
 * @TODO Add ability to filter by additional fields
 * @TODO Add paging.
 */
function hosting_site_list($filter_by = null, $filter_value = null) {
  $args[] = 'site';
  $cond = '';

  if ($filter_by && $filter_value) {
    if ($filter_by == 'status') {
      $cond = ' AND s.' . $filter_by . ' & %d';
    } else {
      $cond = ' AND s.' . $filter_by . ' = %d';
    }
    $args[] = $filter_value;
  }

  $header = array(
    array('data' => t('Site'), 'field' => 'title'),
    array('data' => t('Profile'), 'field' => 'profile'),
    array('data' => t('Language'), 'field' => 'language'),
    array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc'),
  );
  $platforms = _hosting_get_platforms();
  if (sizeof($platforms) > 1) {
    $header[] = array('data' => t('Platform'), 'field' => 'platform');
  }

  $sql = "SELECT n.nid, n.title, n.created, s.status, profile, language, platform FROM {node} n left join {hosting_site} s ON n.vid=s.vid WHERE type='%s'" . $cond;
  $sql .= tablesort_sql($header);

  // @TODO hide deleted sites
  $result = pager_query(db_rewrite_sql($sql), 25, 1, null, $args);

  if (!db_num_rows($result)) {
    return null;
  }
  $rows = array();
  while ($node = db_fetch_object($result)) {
    $row = array();
    $row[] =  array('data' => l($node->title, 'node/' . $node->nid), 'class'=> 'hosting-status');
    $row[] = ($node->profile) ? _hosting_node_link($node->profile) : t('n/a');
    $row[] = ($node->language) ? _hosting_language_name($node->language) : t('n/a');
    $row[] = t("@interval ago", array('@interval' => format_interval(mktime() - $node->created, 1)));
    if (sizeof($platforms) > 1) {
      $row[] = ($node->platform) ? _hosting_node_link($node->platform) : t('n/a');
    }
    $rows[] = array('data' => $row, 'class' => _hosting_site_list_class($node));
  }
  
  return theme('table',  $header, $rows, array('class' => 'hosting-table')) . theme('pager', null, 25, 1);
}

function _hosting_site_list_class($node) {
  $task_status = hosting_task_status('rid', $node->nid, ($node->status & HOSTING_SITE_IMPORTED) ? 'import' : 'install');
  if ($node->status & HOSTING_SITE_DELETED || ($task_status != DRUSH_NOT_COMPLETED && $task_status != DRUSH_SUCCESS)) {
    return 'hosting-error';
  }
  if ($node->status & HOSTING_SITE_INSTALLED) {
    return 'hosting-success';
  }
  return 'hosting-queue';
}

/**
 * Page handler for displaying list of hosted sites on front page
 */
function hosting_sites() {
  if ($list = hosting_site_list('status', (HOSTING_SITE_INSTALLED) & ~HOSTING_SITE_DELETED)) {
    return $list;
  }
  $create_site_link = l(t('Create a site now?'), 'node/add/site');
  return t("No sites have been created yet. !link", array(
    '!link' => $create_site_link));
}

function hosting_site_menu($may_cache = false) {
  $items[] = array(
    'path' => 'hosting/sites',
    'title' => t('Hosted sites'),
    'description' => t('Display a list of sites'),
    'callback' => 'hosting_sites',
    'type' => MENU_CALLBACK,
    'access' => user_access('create site') 
  );

  $items[] = array(
    'path' => 'hosting/hosting_site_form_populate',
    'callback' =>'_hosting_site_form_populate',
    'type' => MENU_CALLBACK,
    'access' => TRUE,
  );

  return $items;
}

/**
 * generate hosting site node form element 'profile'
 */
function _hosting_site_form_profile($platform = NULL) {
  $profiles = hosting_get_profiles($platform);
  if (sizeof($profiles) > 1) {
    $form['profile'] = array(
      '#type' => 'radios',
      '#title' => t('Install profile'),
      '#description' => t('The type of site to install.'),
      '#options' => $profiles,
      '#default_value' => $node->profile,
      '#required' => TRUE,
      '#attributes' => array('class' => "hosting-site-form-profile-options"),
    );
  }
  else {
    $form['profile'] = array('#type' => 'hidden', '#value' => key($profiles), '#attributes' => array('class' => "hosting-site-form-profile-options"));
  }
  return $form['profile'];
}

/**
 * generate hosting site node form element 'language'
 */
function _hosting_site_form_language($profile = NULL, $platform = null) {
  $languages = hosting_get_profile_languages($profile, $platform);
  if (sizeof($languages) > 1) {
    $form['language'] = array(
      '#type' => 'radios',
      '#title' => t('Language'),
      '#description' => t('The type of site to install.'),
      '#options' => $languages,
      '#required' => TRUE,
      '#default_value' => 'en',
      '#attributes' => array('class' => "hosting-site-form-language-options"),
    );
  }
  else {
    $form['language'] = array('#type' => 'hidden', '#value' => 'en', '#attributes' => array('class' => "hosting-site-form-language-options"));
  }
  return $form['language'];
}

/**
 * populate hosting site node form element with specified arguments
 */
function _hosting_site_form_populate($element, $value, $value2 = null) {
  $form[$element] = call_user_func('_hosting_site_form_'. $element, $value, $value2);

  print drupal_to_js(
    array(
      'status' => 'TRUE',
      'type' => $form[$element]['#type'],
      'data' => drupal_render(form_builder('hosting-site-form', $form)),
    )
  );
  exit();
}

function hosting_site_hosting_post_import($task, $data) {
  $site = node_load($task->rid);
  
  hosting_import_site($site->nid, $data['options'], HOSTING_SITE_ENABLED | HOSTING_SITE_INSTALLED | HOSTING_SITE_IMPORTED, $site->platform);
}

