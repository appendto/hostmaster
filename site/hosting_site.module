<?php

include_once('hosting_site_status.inc');
include_once('hosting_site.views.inc');

function hosting_site_node_info() {
  $types["site"] =  array(
    "type" => 'site', "name" => 'Site',
    "module" => 'hosting_site',
    "has_title" => TRUE, "title_label" => 'Domain name', 
    "description" => hosting_node_help("site"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  return $types;

}

function hosting_map_values_site($node) {
  $values['site_id'] = $node->nid;
  $values['site_url'] = $node->title;

  $values = array_merge($values, hosting_map_values($node->platform));
  $values = array_merge($values, hosting_map_values($node->client));
  $values = array_merge($values, hosting_map_values($node->db_server));

  ## fields that will be used on the command line call
  $values['#export_site'] = array_merge( 
    array('publish_path', 'site_id'), 
    $values['#export_db_server'], 
    $values['#export_web_server'],
    $values['#export_client']);

  # @todo : load profile / release details
  return $values;
}

/**
 * Return a count of enabled sites.
 *
 * This is used by cron and statistics to batch the number of sites that are processed with each call
 */
function hosting_site_count() {
  return db_result(db_query("SELECT count(nid) FROM {node} WHERE type='site' AND status=1"));
}

/**
 * Helper function to generate new site node
 */
function hosting_add_site($url, $client, $platform, $db_server, $profile, $site_status) {
 global $user;

 $node = new stdClass();
 $node->type = 'site';
 $node->uid = $user->uid;
 $node->status = 1;
 #todo: make this pretty
 $node->title = $url;

 $client = hosting_get_client($client);
 $node->client = ($client) ? $client->nid : HOSTING_DEFAULT_CLIENT;

 $db_server = hosting_get_db_server($db_server);
 $node->db_server = ($db_server) ? $db_server->nid : HOSTING_DEFAULT_DB_SERVER;

 // this will only ever be an nid, so we don't need to load a node.
 $node->platform = ($platform) ? $platform : HOSTING_DEFAULT_PLATFORM;


 // need to build some error tolerance in here
 $profile = hosting_get_package_instance($platform, $profile);
 if (!$profile) {
   $profile = hosting_get_package_instance($platform, 'default');
 }
 $node->profile = $profile->nid;

 $node->site_status = $site_status;
 node_save($node);
}

/**
 * implementation of the hosting_post_install hook
 *
 * XXX: this should be called hosting_site_hosting_post_install but since this
 * is not a real module, it will not work so we're taking over the whole
 * module's hook here, which is bad.
 */
function hosting_site_hosting_post_install($task, $data) {
  db_query("UPDATE {hosting_site} SET status=status|%d WHERE nid=%d", HOSTING_SITE_INSTALLED, $task->rid);
}

/**
 * implementation of hook_hosting_post_disable
 * I am not very fond of the use of bitwise operators with negatives.
 */
function hosting_site_hosting_post_disable($task, $data) {
  $ref = node_load($task->rid);
  if ($data['site']['backup_file'] && $ref->type == 'site') {
    $platform = node_load($ref->platform);
    hosting_site_add_backup($ref->nid, $platform->web_server, $data['site']['backup_file'], t('Generated before being disabled'));
  }
  db_query("UPDATE {hosting_site} SET status=status&%d WHERE nid=%d", HOSTING_SITE_DISABLED, $task->rid);
}

/**
 * implementation of hook_hosting_post_restore
 * I am not very fond of the use of bitwise operators with negatives.
 */
function hosting_site_hosting_post_restore($task, $data) {
  $ref = node_load($task->rid);
  if ($data['site']['backup_file'] && $ref->type == 'site') {
    $platform = node_load($ref->platform);
    hosting_site_add_backup($ref->nid, $platform->web_server, $data['site']['backup_file'], t('Generated before being restored to a previous version'));
  }
}

/**
 * implementation of hook_hosting_post_enable
 */
function hosting_site_hosting_post_enable($task, $data) {
  db_query("UPDATE {hosting_site} SET status=status|%d WHERE nid=%d", HOSTING_SITE_ENABLED, $task->rid);
}

/**
 * implementation of hook_hosting_post_DELETE
 */
function hosting_site_hosting_post_delete($task, $data) {
  db_query("UPDATE {hosting_site} SET status=%d WHERE nid=%d", HOSTING_SITE_DELETED, $task->rid);
}


function hosting_site_form($node) {
  $type = node_get_types('type', $node);
  
  // We need to define form elements for the node's title and body.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  $clients = _hosting_get_clients();
  if (sizeof($clients) > 1) {
    $form['client'] = array(
      '#type' => 'radios',
      '#title' => t('Client'),
      '#description' => t('The client who this site belongs to.'),
      '#options' => $clients,
      '#default_value' => $node->client,
    );
  }
  else {
    $form['client'] = array('#type' => 'value', '#value' => key($clients));
  }

  $platforms = _hosting_get_platforms();
  if (sizeof($platforms) > 1) {
    $form['platform'] = array(
      '#type' => 'radios',
      '#title' => t('Platform'),
      '#description' => t('The platform you want the site to be hosted on.'),
      '#options' => $platforms,
      '#default_value' => $node->platform,
    );
  }
  else {
    $form['platform'] = array('#type' => 'value', '#value' => key($platforms));
  }

  $db_servers = _hosting_get_db_servers();
  if (sizeof($db_servers) > 1) {
    $form['db_server'] = array(
      '#type' => 'radios',
      '#title' => t('Database server'),
      '#description' => t('The database server the site will use to host it\'s content.'),
      '#options' => $db_servers,
      '#default_value' => $node->db_server,
    );
  }
  else {
    $form['db_server'] = array('#type' => 'value', '#value' => key($db_servers));
  } 
  
  return $form;
}

function hosting_site_validate(&$node) {
  if (!preg_match("/^([\w-]+\.)+[a-z]{2,4}$/i", $node->title ) ) {
    form_set_error('title', t("You have not specified a valid url for this site."));
  }
  # TODO: maybe we should allow creation of sites that conflict with HOSTING_SITE_DISABLED (which would then need to be renamed before being re-enabled)
  if (db_result(db_query("SELECT COUNT(n.nid) FROM {node} n JOIN {hosting_site} h ON n.nid = h.nid WHERE type='site' AND title='%s' AND  n.nid <> %d AND h.status & %d", $node->title, $node->nid, ~HOSTING_SITE_DELETED))) {
    form_set_error('title', t("The url you specified is not unique."));
  }
}


function hosting_site_insert(&$node) {
  if (!($node->site_status & HOSTING_SITE_IMPORTED)) {
    $node->site_status = HOSTING_SITE_ENABLED; # HOSTING_SITE_NOTINSTALLED implicit
  }
  db_query("INSERT INTO {hosting_site} (vid, nid, client, db_server, platform, last_cron, status) VALUES (%d, %d, %d, %d, %d, %d, %d)",
    $node->vid, $node->nid, $node->client, $node->db_server, $node->platform, $node->last_cron, $node->site_status);
  if ((!$node->old_vid) && !($node->site_status & HOSTING_SITE_IMPORTED)) {
    hosting_add_task($node->nid, 'install');    
  }
}
 
function hosting_site_update(&$node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_site_insert($node);
  }
  else {
    db_query("UPDATE {hosting_site} SET client = %d, db_server = %d, platform = %d, last_cron =%d, status=%d WHERE vid=%d",
              $node->publish_path, $node->web_server, $node->vid, $node->site_status, $node->vid);
  }
  if (!$node->no_synch) {
    hosting_add_task($node->nid, 'synch');
  }
}

function hosting_site_load($node) {
  $additions = db_fetch_object(db_query('SELECT  client, db_server, platform, last_cron, status AS site_status FROM {hosting_site} WHERE vid = %d', $node->vid));
  return $additions;
}

function hosting_site_view(&$node, $teaser = false) {

  if (($node->site_status & HOSTING_SITE_ENABLED) && ($node->site_status & HOSTING_SITE_INSTALLED)) {
    $node->content['link'] = array('#value' => l(t('Go to site'), 'http://' . $node->title), '#weight' => -10);
  }
  $node->content['client'] = array(
    '#type' => 'item',
    '#title' => t('Client'),
    '#value' => _hosting_node_link($node->client),
  );
  
  $node->content['platform'] = array(
    '#type' => 'item',
    '#title' => t('Platform'),
    '#value' => _hosting_node_link($node->platform),
  );
  $node->content['db_server'] = array(
    '#type' => 'item',
    '#title' => t('Database server'),
    '#value' => _hosting_node_link($node->db_server),
  );
  $node->content['status'] = array(
    '#type' => 'item',
    '#title' => t('Status'),
    '#value' => hosting_site_status_output($node->site_status),
  );
  
  $view = views_get_view('tasks_embed');
  $node->content['tasks_view'] = array(
    '#type' => 'item',
    '#title' => t("Tasks"),
    '#value' => views_build_view('embed', $view, array($node->nid)), 
    '#weight' => 10
  );
  return $node;
}



/**
 * Add a site backup record.
 *
 * Builds a list of backups of the site that have been generated.
 */
function hosting_site_add_backup($site, $web_server, $filename, $description = '') {
  $bid = db_next_id("{hosting_site_backups}_bid");
  db_query("INSERT INTO {hosting_site_backups} (bid, site, web_server, filename, description, timestamp) VALUES (%d, %d, %d, '%s', '%s', %d)",
    $bid, $site, $web_server, $filename, $description, mktime());
  return $bid;
}

/**
 * Delete a site backup record
 */
function hosting_site_delete_backup($bid) {
  db_query("DELETE FROM {hosting_site_backups} WHERE bid=%d", $bid);
}

/**
 * Get a site backup record
 */
function hosting_site_get_backup($bid) {
  return db_fetch_array(db_query("SELECT bid, site, web_server, filename, description, timestamp FROM {hosting_site_backups} WHERE bid = %d", $bid));
}

/**
 * Retrieve a list of backup generated for a site.
 *
 * @param site
 *   The node if of the site backups are being retrieved for
 * @return
 *   An associative array of backups existing for the site, indexed by bid and sorted reverse chronologically.
 */
function hosting_site_backup_list($site) {
  $result = db_query("SELECT bid, description, timestamp FROM {hosting_site_backups} WHERE site=%d ORDER BY timestamp DESC", $site);
  while ($object = db_fetch_object($result)) {
    #needs to be cleaned up. but i am NOT generating a theme func for this right now.
    $backups[$object->bid] = '<strong>' . format_date($object->timestamp) . '</strong> - ' . $object->description;
  }
  return $backups;
}

/**
 * Implementation of hook_hosting_post_backup
 *
 * Adds the data file that was saved to the site backup history.
 * This is needed to be able to restore.
 */
function hosting_site_hosting_post_backup($task, $data) {
  $ref = node_load($task->rid);
  if ($data['site']['backup_file'] && $ref->type == 'site') {
    $platform = node_load($ref->platform);
    hosting_site_add_backup($ref->nid, $platform->web_server, $data['site']['backup_file'], t('Generated on request'));
  }
}


function hosting_site_form_alter($form_id, &$form) {
  // Remove delete button from site edit form
  if ($form_id == 'site_node_form') {
    $form['delete']['#type'] = 'hidden';
  }
}

function hosting_site_exists($url) {
  $result = db_result(db_query("
    SELECT COUNT(n.nid) FROM 
    {node} n JOIN {hosting_site} h 
    ON n.nid = h.nid WHERE type='site'
    AND title='%s' AND  n.nid <> %d AND h.status & %d",
    $node->title, ~HOSTING_SITE_DELETED)); 
  return $result; 
}
