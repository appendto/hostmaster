<?php
/**
 * @file DNS server node type is defined here.
 *
 * This is primarily a node module that implements the "front end" of the DNS
 * feature of the Aegir system.  Its role is to allow the admin to setup
 * DNS-related settings and defaults for provisioning new sites.  The
 * corresponding provision_dns.module in the provision project complements this
 * by implementing the drush-driven tasks that constitute the "backend" of the
 * system.
 **/

/**
 * Implementation of hook_init()
 **/
function hosting_dns_init() {
  define('HOSTING_DEFAULT_DNS_SERVER', variable_get('hosting_default_dns_server', 0));
  define('HOSTING_OWN_DNS_SERVER', variable_get('hosting_own_dns_server', 0));
}

function hosting_dns_help($section) {
  switch ($section) {
    case 'dns_server' :
      return t("<strong>The DNS server which defines sites and their domains.</strong>
                Most sites will have a primary and secondary DNS server, at least one of which is usually 
		remote from the server on which the site actually resides.");
      break;
  }
}

/**
 * Implementation of hook_node_info
 **/
function hosting_dns_node_info() {
  $types["dns_server"] =  array(
    "type" => 'dns_server', "name" => 'DNS server',
    "module" => 'hosting_dns',
    "has_title" => TRUE, "title_label" => t('Host name'), 
    "description" => hosting_dns_help("dns_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    
  return $types;
}

/**
 * Implementation of hook_perm
 **/
function hosting_dns_perm() {
  return array('create DNS server','view DNS server', 'edit DNS server', 'delete DNS server');
}

/**
 * Implementation of hook_access
 **/
function hosting_dns_access($op, $node) {
  global $user;

  switch($op) {
    case 'create':
      return user_access('create DNS server');
      break;
    case 'view':
      return user_access('view DNS server');
      break;
    case 'update':
      return user_access('edit DNS server');
      break;
    case 'delete':
      return user_access('delete DNS server');
      break;
    default:
      break;
  }
}

/** 
 * Implementation of hook_provision_args
 * Used to pass along configuration details to the backend provisioning tasks
 **/
function hosting_dns_provision_args($node, $task = '') {
  $values = array();
  if ($task == 'verify' || $task == 'install') {
    $values['load-provision-dns'] = TRUE;
    if ($node->type == 'site') {
      $platform = node_load($node->platform);
      $dns = node_load($platform->dns_server);
    } elseif ($node->type == 'platform') {
      $dns = node_load($node->dns_server);
    }

    $values['dns_id'] = $dns->nid;
    $values['dns_ip'] = $dns->default_ip;
  }
  return $values;
}

/**
 * Small helper function to get DNS servers.
*/ 
function _hosting_get_dns_servers() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='dns_server' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}


/**
 * Implementation of hook_form().
 */
function hosting_dns_form(&$node) {
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Hostname'),
    '#description' => t('The address of the DNS server.'),
    '#size' => 30,
    '#default_value' => $node->title,
    '#maxlength' => 64,
    '#weight' => 0,
  );
  $form['engine'] = array(
    '#type' => 'select',
    '#title' => t('Type/Engine'),
    '#description' => t('The type of DNS server engine this is.'),
    '#options' => array('bind' => t('BIND'), 'mydns' => t('MyDNS'), 'djbdns' => t('djbdns')),
    '#default_value' => $node->engine,
  );
  $form['dns_defaults'] = array(
    '#type' => 'fieldset', 
    '#title' => t('DNS Provisioning defaults'), 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );
  $form['dns_defaults']['default_ip'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Server IP'),
    '#default_value' => $node->default_ip?$node->default_ip:'127.0.0.1',
    '#size' => 20,
    '#maxlength' => 15,
    '#description' => t('Use this IP as the default server for new zones.'),
  );
  $form['dns_defaults']['xfer'] = array(
    '#type' => 'textfield',
    '#title' => t('Zone Transfer Access List'),
    '#default_value' => $node->xfer,
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t('Comma-separated list of IP addresses allowed to transfer this zone via AXFR'),
  );
  $form['dns_defaults']['mbox'] = array(
    '#type' => 'textfield',
    '#title' => t('DNS Admin Email Address'),
    '#default_value' => $node->mbox,
    '#size' => 40,
    '#maxlength' => 128,
    '#description' => t('Ampersand will be converted to a period as per specification. This value will be entered into zonefiles.'),
  );
  $form['dns_defaults']['ns'] = array(
    '#type' => 'textarea',
    '#title' => t('Name Servers'),
    '#default_value' => $node->ns,
    '#size' => 40,
    '#maxlength' => 128,
    '#description' => t('Default DNS servers for zonefiles eg: ns1.example.com (1 per line)')
  );
  $form['dns_defaults']['refresh'] = array(
    '#type' => 'textfield',
    '#title' => t('Refresh'),
    '#default_value' => $node->refresh?$node->refresh:'7200',
    '#size' => 40,
    '#maxlength' => 128,
    '#description' => t('How often secondary servers should refresh this zone (default 2h)'),
  );
  $form['dns_defaults']['retry'] = array(
    '#type' => 'textfield',
    '#title' => t('Retry'),
    '#default_value' => $node->retry?$node->retry:'300',
    '#size' => 40, 
    '#maxlength' => 128,
    '#description' => t('How often secondary servers should retry in case of a problem (default 5m)'),
  );
  $form['dns_defaults']['expire'] = array(
    '#type' => 'textfield',
    '#title' => t('Expire'),
    '#default_value' => $node->expire?$node->expire:'604800',
    '#size' => 40,
    '#maxlength' => 128,
    '#description' => t('How long until the secondary servers expire the zone data (default 4w)'),
  );
  $form['dns_defaults']['minimum'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum TTL'),
    '#default_value' => $node->minimum?$node->minimum:'86400',
    '#size' => 40,
    '#maxlength' => 128,
    '#description' => t('Minimum caching time in case of failed lookups (default 1w)'),
  );
  $form['dns_defaults']['ttl'] = array(
    '#type' => 'textfield',
    '#title' => t('Time To Live'),
    '#default_value' => $node->ttl?$node->ttl:'86400',
    '#size' => 40,
    '#maxlength' => 128,
    '#description' => t('Default TTL for zone resource records without their own TTL value (default 1w)'),
  );

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function hosting_dns_validate($node, &$form) {

  # TODO: validate all the various DNS fields!

  if ($node->engine != 'bind') {
    form_set_error('engine', 'Only the BIND engine is supported at this time.');
  }
}

/**
 * Implementation of hook_insert().
 */
function hosting_dns_insert($node) {
   db_query("INSERT INTO {hosting_dns_server} (vid, nid, engine, default_ip, ns, mbox, refresh, retry, expire, minimum, ttl, xfer) 
      VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')", 
      $node->vid, $node->nid, $node->engine, $node->default_ip, $node->ns, $node->mbox, $node->refresh, $node->retry, $node->expire, $node->minimum, $node->ttl, $node->xfer);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_dns_update($node) {
  if ($node->revision) {
    hosting_dns_insert($node);
  } else { 
    db_query("UPDATE {hosting_dns_server} SET engine = '%s', default_ip = '%s', ns = '%s', mbox = '%s', refresh = '%s', retry = '%s', expire = '%s', minimum = '%s', ttl = '%s', xfer = '%s' WHERE vid = %d", $node->engine, $node->default_ip, $node->ns, $node->mbox, $node->refresh, $node->retry, $node->expire, $node->minimum, $node->ttl, $node->xfer, $node->vid);
  }
}

function hosting_nodeapi_dns_server_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_dns_server} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_dns_delete($node) {
  db_query('DELETE FROM {hosting_dns_server} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_dns_load($node) {
  $additions = db_fetch_object(db_query('SELECT engine, default_ip, ns, mbox, refresh, retry, expire, minimum, ttl, xfer FROM {hosting_dns_server} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_dns_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node->content['engine'] = array(
    '#type' => 'item',
    '#title' => t('DNS engine'),
    '#value' => $node->engine,
    '#weight' => -1,
  );
  $node->content['defaults'] = array(
    '#type' => 'fieldset',
    '#title' => t('Defaults'),
    '#collapsible' => TRUE,
    '#collapsed' => $teaser?TRUE:FALSE,
  );
  $node->content['defaults']['default_ip'] = array(
    '#type' => 'item',
    '#title' => t('Default Server IP'),
    '#value' => $node->default_ip,
  );
  $node->content['defaults']['ns'] = array(
    '#type' => 'item',
    '#title' => t('Default NS Records'),
    '#value' => preg_replace("/\n/", '<br />', $node->ns),
  );
  $node->content['defaults']['mbox'] = array(
    '#type' => 'item',
    '#title' => t('DNS Admin Email'),
    '#value' => $node->mbox,
  );
  $node->content['defaults']['refresh'] = array(
    '#type' => 'item',
    '#title' => t('Refresh'),
    '#value' => $node->refresh,
  );
  $node->content['defaults']['retry'] = array(
    '#type' => 'item',
    '#title' => t('Retry'),
    '#value' => $node->retry,
  );
  $node->content['defaults']['expire'] = array(
    '#type' => 'item',
    '#title' => t('Expire'),
    '#value' => $node->expire,
  );
  $node->content['defaults']['minimum'] = array(
    '#type' => 'item',
    '#title' => t('Minimum TTL'),
    '#value' => $node->minimum
  );
  $node->content['defaults']['ttl'] = array(
    '#type' => 'item',
    '#title' => t('TTL'),
    '#value' => $node->ttl
  );
  $node->content['defaults']['xfer'] = array(
    '#type' => 'item',
    '#title' => t('Zone Transfer Access List'),
    '#value' => $node->xfer
  );
  
# This should show a table of all sites that use this DNS server to host their domain?
#  $node->content['sites_view'] = array(
#    '#type' => 'item',
#    '#title' => t("Sites"),
#    '#value' => hosting_site_list("dns_server", $node->nid), 
#    '#weight' => 10
#  );
  
  return $node;
}

/**
 * Implementation of hook_hosting_summary.
 *
 * Provides a list of existing DNS servers for the hosting summary block.
 **/
function hosting_dns_hosting_summary() {
  $summary = array();
  $dns_servers = _hosting_get_dns_servers();
  $summary['dns_servers'] = theme('item_list', array_map('_hosting_node_link', array_keys($dns_servers)), t('DNS Servers'));
  return $summary;
}

/**
 * Implementation of hook_form_alter.
 *
 * Add a radio buttons field to select a DNS server. This field is hidden if 
 * only one DNS server is available.
 **/
function hosting_dns_form_alter($form_id, &$form) {
  
  if ($form_id == 'platform_node_form') {
    $dns_servers = _hosting_get_dns_servers();
    if (sizeof($dns_servers) > 1) {
      $form['dns_server'] = array(
	'#type' => 'radios',
	'#title' => t('DNS Server'),
	'#description' => t('The DNS server the site domains will be hosted on.'),
	'#options' => $dns_servers,
	'#default_value' => ($form['#node']->dns_server) ? $form['#node']->dns_server : HOSTING_DEFAULT_DNS_SERVER,
      );
    } else {
      $dns_nid = key($dns_servers);
      $form['dns_server'] = array('#type' => 'hidden', '#value' => $dns_nid);
      $form['dns_server_show'] = array(
        '#type' => 'item', 
        '#title' => t('DNS Server'),
        '#value' => $dns_servers[$dns_nid],
        '#description' => t('The default DNS server has been chosen for this platform, as there are no others to choose from.'),
      );
    }
  }
}

/**
 * Helper function for hook_nodeapi to insert platform -> dns_server mapping
 **/
function hosting_dns_platform_insert($node) {
  db_query("INSERT INTO {hosting_dns_platform} (vid, nid, dns_server) VALUES (%d, %d, %d)", $node->vid, $node->nid, $node->dns_server);
}

/**
 * Helper function for hook_nodeapi to load dns_servers for a platform
 * 
 * @param $node
 *   The platform node for which to get a DNS server.
 **/
function hosting_get_dns_server($node) {
  $dns_nid = db_result(db_query("SELECT dns_server FROM {hosting_dns_platform} WHERE nid=%d AND vid=%d", $node->nid, $node->vid));

  if ($dns_nid) {
    return $dns_nid;
  } else {
    return HOSTING_DEFAULT_DNS_SERVER;
  }
}


/**
 * Implementation of hook_nodeapi
 * 
 * Validate site URLs to ensure they fall within a valid TLD.
 * Also manage inserts, updates, and deletions of DNS servers when platform nodes change.
 **/
function hosting_dns_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'validate' && $node->type == 'site') {
    $tlds = split("\n", variable_get('provision_dns_tlds', ''));
    $matched_tld = FALSE;
    foreach ($tlds as $tld) {
      $tld = trim($tld);
      $pat = "/".$tld."$/";
      if (preg_match($pat, $node->title)) {
        $matched_tld = TRUE;
        break;
      }
    }
    if (!$matched_tld) {
      form_set_error('title', t("The URL you have provided is not within a valid Top-Level Domain to be provisioned."));
    }
  }
  if ($node->type == 'platform') {
    switch ($op) {
      case 'insert':
        hosting_dns_platform_insert($node);
        break;
      case 'update':
        $exists = db_result(db_query("SELECT dns_server FROM {hosting_dns_platform} WHERE nid = %d and vid = %d", $node->nid, $node->vid));
        if ($node->revision || !$exists) {
          hosting_dns_platform_insert($node);
        } else {
          db_query("UPDATE {hosting_dns_platform} SET dns_server = %d WHERE nid = %d AND vid = %d", $node->dns_server, $node->nid, $node->vid);
        }
        break;
      case 'delete':
        db_query("DELETE FROM {hosting_dns_platform} WHERE nid=%d", $node->nid);
        break;
      case 'delete revision':
        db_query("DELETE FROM {hosting_dns_platform} WHERE nid=%d AND vid=%d", $node->nid, $node->vid);
        break;
      case 'validate':
        break;
      case 'load':
        return array('dns_server' => hosting_get_dns_server($node));
        break;
      case 'view':
        $dns_server = hosting_get_dns_server($node);
        
	$node->content['info']['dns_server'] = array(
	  '#type' => 'item',
	  '#title' => t('DNS server'),
	  '#value' => _hosting_node_link($dns_server),
	  '#weight' => -6
	);
        break;
    }
  }
}
