<?php
/**
 * @file Defines package node types
 *
 * Packages are somewhat analogous to Drupal.org projects. IE: components that can be installed onto Drupal sites.
 */

function hosting_package_node_info() {
  #package management
  $types["package"] =  array(
    "type" => 'package', "name" => 'Package',
    "module" => 'hosting_package',
    "has_title" => FALSE, "title_label" => '', 
#    "description" => hosting_node_help("package"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);

  $types["package_release"] =  array(
    "type" => 'package_release', "name" => 'Package release',
    "module" => 'hosting_package_release',
    "has_title" => FALSE, "title_label" => '', 
 #   "description" => hosting_node_help("package_release"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);


  return $types;
}

function hosting_package_menu($may_cache) {
  $items = array();
  
  if (!$may_cache) {
    if ( arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'platform') {
        $items[] = array(
          'path' => 'node/' . arg(1) . '/packages',
          'title' => t('Packages'),
          'description' => t('List of packages available for this platform'),
          'callback' => 'hosting_package_list',
          'callback arguments' => array(arg(1)),
          'type' => MENU_LOCAL_TASK,
          'weight' => 1, 
        );
        $items[] = array(
          'path' => 'node/' . arg(1) . '/packages/all',
          'title' => t('All packages'),
          'description' => t('List of all packages'),
          'callback' => 'hosting_package_list',
          'callback arguments' => array(arg(1)),
          'type' => MENU_DEFAULT_LOCAL_TASK,
          'weight' => -1, 
        );
        foreach (_hosting_package_types() as $type => $description) {
          $items[] = array(
            'path' => 'node/' . arg(1) . '/packages/' . $type,
            'title' => $description,
            'description' => $description,
            'callback' => 'hosting_package_list',
            'callback arguments' => array(arg(1), $type),
            'type' => MENU_LOCAL_TASK,
            'weight' => $x++, 
          );           
        }
      }
     }
  }
  return $items;
}


function hosting_package_access($op, $node) {
  return hosting_access($op, $node);
}

function hosting_package_release_access($op, $node) {
  return hosting_access($op, $node);
}

function hosting_get_profiles($platform = NULL) {
  // load profile options: if argument is null, load all profile options
  $result = db_query('SELECT n.nid FROM {node} n LEFT JOIN {hosting_package} hp ON n.nid = hp.nid 
                                                 LEFT JOIN {hosting_package_release} hpr ON hp.nid = hpr.package 
                                                 LEFT JOIN {hosting_package_instance} hpi ON hpr.nid = hpi.release_id 
                                                 LEFT JOIN {hosting_platform} l ON hpi.rid = l.nid 
                                                 WHERE '. ($platform ? ' l.nid = %d AND ' : '') .' hp.package_type = "profile"', $platform);

  while ($nid = db_fetch_object($result)) {
    $profiles[$nid->nid] = node_load(array('nid' => $nid->nid));
  }

  foreach ($profiles as $profile) {
    $return[$profile->nid] = $profile->title;
  }
  return $return;
}

function hosting_get_profile_languages($platform = NULL, $profile = NULL) {
  // load language options: if argument is null, load all language options
  $result = db_query("SELECT DISTINCT(language) FROM {hosting_package_languages}". ($profile ? " WHERE iid = %d" : ""), $profile);
  while ($language = db_fetch_object($result)) {
    $languages[] = $language->language;
  }

  if (!is_array($languages)) {
    $languages = array('en');
  }
  return _hosting_language_names($languages);
}

/**
 * A generic method for finding whichever packages you are looking for.
 *
 * This works similarly to node_load's implementation, but it will only look
 * for fields related to packages.
 *
 * @param
 *    An associated array containing the following properties
 *      name => A string containing the friendly name of the package
 *      short_name => The name of the drupal package in the system table
 *      package_type => The type of package. (theme|module|profile|engine)
 */
function _hosting_package_load($param) {
  // Turn the conditions into a query.
  foreach ($param as $key => $value) {
    $cond[] = 'p.'. db_escape_table($key) ." = '%s'";
    $arguments[] = $value;
  }
  $cond = implode(' AND ', $cond);
  $result = db_query('SELECT n.nid FROM {node} n left join {hosting_package} p on n.nid = p.nid WHERE ' . $cond, $arguments);
  while ($nid = db_fetch_object($result)) {
    $return[$nid->nid] = node_load(array('nid' => $nid->nid));
  }
  if (sizeof($return)) {
    return $return;
  }
  return null;
}

function hosting_get_packages_by_type($type) {
  $result = db_query("SELECT nid FROM {hosting_package} WHERE package_type = '%s'", $type);

  if ($nid = db_result($result)) {
    return node_load($nid);
  }
  else {
    return false;
  }
}


function hosting_get_package($short_name) {
  $result = db_query("SELECT nid FROM {hosting_package} WHERE short_name = '%s'", $short_name);
  if ($nid = db_result($result)) {
    return node_load($nid);
  }
  else {
    return false;
  }
}

function hosting_get_package_release($short_name, $version) {
  $result = db_query("SELECT r.nid FROM {hosting_package} p LEFT JOIN {hosting_package_release} r ON p.nid = r.package WHERE p.short_name = '%s' AND r.version = '%s'", $short_name, $version);
  if ($nid = db_result($result)) {
    return node_load($nid);
  }
  else {
    return false;
  }
}

function hosting_get_package_instance($rid, $short_name) {
  $result = db_query("SELECT p.nid FROM {hosting_package} p LEFT JOIN {hosting_package_release} r on p.nid = r.package left join {hosting_package_instance} i ON r.nid = i.release_id WHERE p.short_name = '%s' AND i.rid = '%s'", $short_name, $rid);
  if ($nid = db_result($result)) {
    return node_load($nid);
  }
  else {
    return false;
  }
}


function hosting_delete_package_instances($nid) {
  db_query("DELETE FROM {hosting_package_instance} WHERE rid = %d", $nid);
}

function hosting_add_package_instance($nid, $rid, $info) {
  $iid = db_next_id("{hosting_package_instance}_iid");
  db_query("INSERT INTO {hosting_package_instance} (iid, release_id, rid, path) VALUES (%d, %d, %d, '%s')", $iid, $nid, $rid, $info->filename);

  // Import other translations
  if (sizeof($info->info['languages']) > 1) {
    hosting_package_languages_insert($iid, $info->info['languages']); 
  }
} 

/**
 * Implementation of hook_insert().
 */
function hosting_package_insert($node) {
  db_query("INSERT INTO {hosting_package} (vid, nid, package_type, short_name, description ) VALUES (%d, %d, '%s', '%s', '%s')",
    $node->vid, $node->nid, $node->package_type, $node->short_name, $node->description );
}

/**
 * Insert translation of packages
 */
function hosting_package_languages_insert($iid, $languages) {
  db_query("DELETE FROM {hosting_package_languages} WHERE iid=%d", $iid);
  foreach ($languages as $language) {
    db_query("INSERT INTO {hosting_package_languages} (iid, language) VALUES (%d, '%s')", $iid, $language);
  }
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_package_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_package_insert($node);
  }
  else {
    db_query("UPDATE {hosting_package} SET package_type = '%s', short_name = '%s', description = '%s' WHERE nid=%d",
      $node->package_type, $node->short_name, $node->description, $node->vid, $node->nid);
  }
}

function hosting_nodeapi_package_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_package} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_package_delete($node) {
  db_query('DELETE FROM {hosting_package} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_package_load($node) {
  $additions = db_fetch_object(db_query('SELECT package_type, short_name, description FROM {hosting_package} WHERE vid = %d', $node->vid));

  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_package_view($node, $teaser = FALSE, $page = FALSE) {
  hosting_set_breadcrumb($node);
  $node->content['package_type'] = array(
    '#type' => 'item',
    '#title' => t('Package Type'),
    '#value' => $node->package_type,
  );
  $node->content['short_name'] = array(
    '#type' => 'item',
    '#title' => t('Project name'),
    '#value' => $node->short_name,
  );

  if ($node->package_type == 'profile') {
    $node->content['sites'] = array(
      '#type' => 'item',
      '#title' => t("Sites"),
      '#value' => hosting_site_list("profile", $node->nid), 
      '#weight' => 10
    );
  }

  /**
  $view = views_get_view('package_release_embed');
  $node->content['release_view'] = array(
    '#type' => 'item',
    '#title' => t("Releases"),
    '#value' => views_build_view('embed', $view, array($node->nid)), 
    '#weight' => 10
  );
  */
  return $node;
}

/**
 * Return names of the languages available
 */

function _hosting_language_names($languages) {
  foreach ($languages as $language) {
    // Try to use verbose language name
    $return[$language] = _hosting_language_name($language);
  }
  return $return;
}

function _hosting_language_name($language) {
  include_once './includes/locale.inc';
  $locales = _locale_get_iso639_list();
  return $locales[$language][0] . (isset($locales[$language][1]) ? ' '. t('(@language)', array('@language' => $locales[$language][1])) : '');
}

function hosting_package_release_set_title(&$node) {
  $package = node_load($node->package);
  $node->title = $package->title . ' ' . $node->version;
  db_query("UPDATE {node} SET title='%s' WHERE nid=%d", $node->title, $node->nid);
  db_query("UPDATE {node_revisions} SET title='%s' WHERE vid=%d", $node->title, $node->vid);
}

/**
 * Implementation of hook_insert().
 */
function hosting_package_release_insert($node) {
  db_query("INSERT INTO {hosting_package_release} (vid, nid, package, schema_version, version ) VALUES (%d, %d, %d, %d, '%s')",
    $node->vid, $node->nid, $node->package, $node->schema_version, $node->version );
  hosting_package_release_set_title($node);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_package_release_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_package_release_insert($node);
  }
  else {
    db_query("UPDATE {hosting_package_release} SET package = %d, schema_version = %d, version = '%s' WHERE nid=%d",
              $node->package, $node->schema_version, $node->version, $node->vid, $node->nid);
  }
  hosting_package_release_set_title($node);
}

function hosting_nodeapi_package_release_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_package_release} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_package_release_delete($node) {
  db_query('DELETE FROM {hosting_package_release} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_package_release_load($node) {
  $additions = db_fetch_object(db_query('SELECT package, schema_version, version FROM {hosting_package_release} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_package_release_view($node, $teaser = FALSE, $page = FALSE) {
  hosting_set_breadcrumb($node);
  $node->content['package'] = array(
    '#type' => 'item',
    '#title' => t('Package'),
    '#value' => _hosting_node_link($node->package),
    '#weight' => -1
  );
  $node->content['version'] = array(
    '#type' => 'item',
    '#title' => t('Version'),
    '#value' => $node->version,
  );
  if ($node->schema_version) {
    $node->content['schema_version'] = array(
      '#type' => 'item',
      '#title' => t('Schema Version'),
      '#value' => $node->schema_version,
    );
  }
  return $node;
}

function hosting_package_import_packages($rid, $type, $default_version, $data) {
  // Import install profiles as package and release nodes
  foreach ($data as $short_name => $info) {
    $version = ($info->info['version']) ? $info->info['version'] : $default_version; // dirty hack. but ugh.
    if (!$package = hosting_get_package($short_name)) {
      $node = new stdClass();
      $node->type = 'package';
      $node->title = ($info->info['name']) ? $info->info['name'] : "$short_name $type $version";
      $node->package_type = $type;
      $node->short_name = $short_name;
      $node->status = 1;
      node_save($node);
      $package = $node;
    }
    if (!$release = hosting_get_package_release($short_name, $version)) {
      $node = new stdClass();
      $node->type = 'package_release';
      $node->package = $package->nid;
      $node->version = $version;
      $node->status = 1;
      node_save($node);
      $release = $node;
    }
    hosting_add_package_instance($release->nid, $rid, $info); 
  }

}

function _hosting_package_types() {
  return array(
    'profile' => t('Installation Profiles'), 
    'module' => t('Modules'), 
    'theme' => t('Themes')
  );
}


/**
 * Display a list of packages associated to a node
 * @TODO Add ability to filter by additional fields
 * @TODO Add paging.
 */
function hosting_package_list($rid, $type = null) {
  $ref = node_load($rid);
  drupal_set_title(t('Packages on @reference', array('@reference' => $ref->title)));


  $header = array(
    array('data' => t('Package'), 'field' => 'short_name'),
    array('data' => t('Release'), 'field' => 'version'),
    array('data' => t('Package type'), 'field' => 'package_type'));
  $args[] = $rid;

  if (!is_null($type)) {
    $cond = " AND p.package_type = '%s'";
    $args[] = $type;
  }

  $sql = "SELECT p.nid as 'package', p.short_name, r.nid as 'release', r.version, p.package_type FROM {hosting_package} p
    LEFT JOIN {hosting_package_release} r ON r.package=p.nid
    LEFT JOIN {hosting_package_instance} i ON i.release_id=r.nid WHERE i.rid=%d" . $cond;
  $sql .= tablesort_sql($header);

  // @TODO hide deleted sites
  $result = pager_query(db_rewrite_sql($sql), 25, 2, null, $args);

  if (!db_num_rows($result)) {
    return t('No packages are associated with @reference', array('@reference' => $ref->title));
  }
  $rows = array();
  while ($package = db_fetch_object($result)) {
    $row = array();
    $row[] =  array('data' => l($package->short_name, 'node/' . $package->package), 'class'=> 'hosting-status');
    $row[] =  l($package->version, 'node/' . $package->release);
    $row[] = $package->package_type;
    $rows[] = array('data' => $row, 'class' => 'hosting-info');
  }
  
  return theme('table',  $header, $rows, array('class' => 'hosting-table')) . theme('pager', null, 25, 2);
}

